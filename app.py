import streamlit as st
import pandas as pd
from datetime import datetime, timedelta, date
import requests
from requests.exceptions import ConnectionError, RequestException 
from io import StringIO, BytesIO
import io, os
import json
import hashlib
import ast
import plotly.express as px
import base64
import calendar 
from fpdf import FPDF # NOVO: Importa FPDF para gera√ß√£o de PDF


# ==============================================================================
# CONFIGURA√á√ÉO GERAL E IN√çCIO DO APP
# ==============================================================================

# Configura√ß√£o da p√°gina para ter largura total e usar o estilo web
# Define o tema de cores com base no estilo da imagem (predominantemente rosa/magenta)
st.set_page_config(
    layout="wide", 
    page_title="Doce&Bella | Gest√£o Financeira", 
    page_icon="üå∏"
)

# Caminho para o logo carregado. 
# ATUALIZA√á√ÉO: Usando a URL do CloudFront para maior estabilidade.
LOGO_DOCEBELLA_FILENAME = "logo_docebella.jpg"
LOGO_DOCEBELLA_URL = "https://i.ibb.co/cdqJ92W/logo-docebella.png" # Link direto para o logo

# URLs das Imagens de Se√ß√£o (CloudFront)
URL_MAIS_VENDIDOS = "https://d1a9qnv764bsoo.cloudfront.net/stores/002/838/949/rte/mid-queridinhos1.png"
URL_OFERTAS = "https://d1a9qnv764bsoo.cloudfront.net/stores/002/838/949/rte/mid-oferta.png"   
URL_NOVIDADES = "https://d1a9qnv764bsoo.cloudfront.net/stores/002/838/949/rte/mid-novidades.png"


# Adiciona CSS para simular a navega√ß√£o no topo e o tema pink/magenta
st.markdown("""
    <style>
    /* 1. Oculta o menu padr√£o do Streamlit e o footer */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    
    /* 2. Estilo Global e Cor de Fundo do Header (simulando a barra superior) */
    .stApp {
        background-color: #f7f7f7; /* Fundo mais claro */
    }
    
    /* 3. Container customizado do Header (cor Magenta da Loja) */
    div.header-container {
        padding: 10px 0;
        background-color: #E91E63; /* Cor Magenta Forte */
        color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }
    
    /* 4. Estilo dos bot√µes/abas de Navega√ß√£o (dentro do header) */
    .nav-button-group {
        display: flex;
        gap: 20px;
        align-items: center;
        padding-right: 20px;
    }
    
    /* Remove a Sidebar do Streamlit padr√£o, pois usaremos a navega√ß√£o customizada no topo */
    [data-testid="stSidebar"] {
        width: 350px; 
    }
    
    /* Estilo para a homepage */
    .homepage-title {
        color: #E91E63;
        font-size: 3em;
        font-weight: 700;
        text-shadow: 2px 2px #fbcfe8; /* Sombra suave rosa claro */
    }
    .homepage-subtitle {
        color: #880E4F;
        font-size: 1.5em;
        margin-top: -10px;
        margin-bottom: 20px;
    }

    /* Estilo para simular os cards de redes sociais (Novidades) */
    .insta-card {
        background-color: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        padding: 15px;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    .insta-header {
        display: flex;
        align-items: center;
        font-weight: bold;
        color: #E91E63;
        margin-bottom: 10px;
    }
    
    /* --- Estilo dos Cards de Produto (Para dentro do carrossel) --- */
    .product-card {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        text-align: center;
        height: 100%;
        width: 250px; /* Largura Fixa para o Card no Carrossel */
        flex-shrink: 0; /* Impede o encolhimento */
        margin-right: 15px; /* Espa√ßamento entre os cards */
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        transition: transform 0.2s;
    }
    .product-card:hover {
        transform: translateY(-5px);
    }
    .product-card img {
        height: 150px;
        object-fit: contain;
        margin: 0 auto 10px;
        border-radius: 5px;
    }
    .price-original {
        color: #888;
        text-decoration: line-through;
        font-size: 0.85em;
        margin-right: 5px;
    }
    .price-promo {
        color: #E91E63;
        font-weight: bold;
        font-size: 1.2em;
    }
    /* CORRE√á√ÉO: CSS para o bot√£o em HTML */
    .buy-button {
        background-color: #E91E63;
        color: white;
        font-weight: bold;
        border-radius: 20px;
        border: none;
        padding: 8px 15px;
        cursor: pointer;
        width: 100%;
        margin-top: 10px; /* Adiciona margem para separa√ß√£o */
    }
    
    /* --- Estilo da Se√ß√£o de Ofertas (Fundo Rosa) --- */
    .offer-section {
        background-color: #F8BBD0; /* Rosa mais claro para o fundo */
        padding: 40px 20px;
        border-radius: 15px;
        margin-top: 40px;
        text-align: center;
    }
    .offer-title {
        color: #E91E63;
        font-size: 2.5em;
        font-weight: 700;
        margin-bottom: 20px;
    }
    .megaphone-icon {
        color: #E91E63;
        font-size: 3em;
        margin-bottom: 10px;
        display: inline-block;
    }

    /* --- CLASSES PARA CARROSSEL HORIZONTAL --- */
    /* Cont√™iner que controla a barra de rolagem e centraliza o conte√∫do */
    .carousel-outer-container {
        width: 100%;
        overflow-x: auto;
        padding-bottom: 20px; 
    }
    
    /* Wrapper interno que for√ßa o alinhamento horizontal e permite centraliza√ß√£o */
    .product-wrapper {
        display: flex; /* FOR√áA OS CARDS A FICAREM LADO A LADO */
        flex-direction: row;
        justify-content: flex-start; 
        gap: 15px;
        padding: 0 50px; 
        min-width: fit-content; 
        margin: 0 auto; 
    }
    
    /* Classe para controlar o tamanho das imagens de t√≠tulo */
    .section-header-img {
        max-width: 400px; 
        height: auto;
        display: block;
        margin: 0 auto 10px; 
    }

    </style>
""", unsafe_allow_html=True)


# ===============================
# FUN√á√ïES AUXILIARES GLOBAIS (DO PRECIFICA√á√ÉO)
# ===============================

# Configura√ß√µes Telegram (MOCK, pois o token real √© via st.secrets)
HARDCODED_TELEGRAM_TOKEN = "8412132908:AAG8N_vFzkpVNX-WN3bwT0Vl3H41Q-9Rfw4"
TELEGRAM_CHAT_ID = "-1003030758192"
TOPICO_ID = 28 # ID do t√≥pico (thread) no grupo Telegram

# Defini√ß√µes de colunas base para Papelaria
INSUMOS_BASE_COLS_GLOBAL = ["Nome", "Categoria", "Unidade", "Pre√ßo Unit√°rio (R$)"]
PRODUTOS_BASE_COLS_GLOBAL = ["Produto", "Custo Total", "Pre√ßo √† Vista", "Pre√ßo no Cart√£o", "Margem (%)"]
COLUNAS_CAMPOS = ["Campo", "Aplica√ß√£o", "Tipo", "Op√ß√µes"]


def gerar_pdf(df: pd.DataFrame) -> BytesIO:
    """Gera um PDF formatado a partir do DataFrame de precifica√ß√£o, incluindo a URL da imagem."""
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "Relat√≥rio de Precifica√ß√£o", 0, 1, "C")
    pdf.ln(5)

    # Configura√ß√µes de fonte para tabela
    pdf.set_font("Arial", "B", 10) # Fonte menor para caber mais dados

    # Definindo largura das colunas (em mm)
    col_widths = {
        "Produto": 40,
        "Qtd": 15,
        "Custo Unit√°rio": 25,
        "Margem (%)": 20,
        "Pre√ßo √† Vista": 25,
        "Pre√ßo no Cart√£o": 25,
        "URL da Imagem": 40 # Nova coluna para a URL
    }
    
    # Define as colunas a serem exibidas no PDF
    pdf_cols = [col for col in col_widths.keys() if col in df.columns or col == "Custo Unit√°rio"]
    current_widths = [col_widths[col] for col in pdf_cols]

    # Cabe√ßalho da tabela
    for col_name, width in zip(pdf_cols, current_widths):
        pdf.cell(width, 10, col_name, border=1, align='C')
    pdf.ln()

    # Fonte para corpo da tabela
    pdf.set_font("Arial", "", 8) # Fonte ainda menor para caber a URL

    if df.empty:
        pdf.cell(sum(current_widths), 10, "Nenhum produto cadastrado.", border=1, align="C")
        pdf.ln()
    else:
        # Itera pelas linhas e escreve na tabela
        for idx, row in df.iterrows():
            if "Produto" in pdf_cols:
                pdf.cell(col_widths["Produto"], 10, str(row.get("Produto", "")), border=1)
            if "Qtd" in pdf_cols:
                pdf.cell(col_widths["Qtd"], 10, str(row.get("Qtd", 0)), border=1, align="C")
            if "Custo Unit√°rio" in pdf_cols:
                # Usa o Custo Total Unit√°rio para o relat√≥rio, se dispon√≠vel
                custo_unit_val = row.get("Custo Total Unit√°rio", row.get("Custo Unit√°rio", 0.0))
                pdf.cell(col_widths["Custo Unit√°rio"], 10, f"R$ {custo_unit_val:.2f}", border=1, align="R")
            if "Margem (%)" in pdf_cols:
                pdf.cell(col_widths["Margem (%)"], 10, f"{row.get('Margem (%)', 0.0):.2f}%", border=1, align="R")
            if "Pre√ßo √† Vista" in pdf_cols:
                pdf.cell(col_widths["Pre√ßo √† Vista"], 10, f"R$ {row.get('Pre√ßo √† Vista', 0.0):.2f}", border=1, align="R")
            if "Pre√ßo no Cart√£o" in pdf_cols:
                pdf.cell(col_widths["Pre√ßo no Cart√£o"], 10, f"R$ {row.get('Pre√ßo no Cart√£o', 0.0):.2f}", border=1, align="R")
            
            # --- NOVO: URL da Imagem no PDF ---
            if "URL da Imagem" in pdf_cols:
                url_display = str(row.get("Imagem_URL", ""))
                # Limita o tamanho da URL para n√£o quebrar o layout
                if len(url_display) > 35:
                    url_display = url_display[:32] + "..."
                pdf.cell(col_widths["URL da Imagem"], 10, url_display, border=1, align="L", link=str(row.get("Imagem_URL", "")))
            # --- FIM NOVO ---
                
            pdf.ln()

    pdf_bytes = pdf.output(dest='S').encode('latin1')
    return BytesIO(pdf_bytes)


def enviar_pdf_telegram(pdf_bytesio, df_produtos: pd.DataFrame, thread_id=None):
    """Envia o arquivo PDF e a primeira imagem (se existir) em mensagens separadas para o Telegram."""
    
    token = st.secrets.get("telegram_token", HARDCODED_TELEGRAM_TOKEN)
    
    image_url = None
    image_caption = "Relat√≥rio de Precifica√ß√£o"
    
    if not df_produtos.empty and "Imagem_URL" in df_produtos.columns:
        first_row = df_produtos.iloc[0]
        url = first_row.get("Imagem_URL")
        produto = first_row.get("Produto", "Produto")
        
        if isinstance(url, str) and url.startswith("http"):
            image_url = url
            image_caption = f"üì¶ Produto Principal: {produto}\n\n[Relat√≥rio de Precifica√ß√£o em anexo]"

    # 1. Envia o PDF (mensagem principal)
    
    url_doc = f"https://api.telegram.org/bot{token}/sendDocument"
    files_doc = {'document': ('precificacao.pdf', pdf_bytesio, 'application/pdf')}
    data_doc = {"chat_id": TELEGRAM_CHAT_ID, "caption": image_caption if not image_url else "[Relat√≥rio de Precifica√ß√£o em anexo]"}
    if thread_id is not None:
        data_doc["message_thread_id"] = thread_id
    
    resp_doc = requests.post(url_doc, data=data_doc, files=files_doc)
    resp_doc_json = resp_doc.json()
    
    if not resp_doc_json.get("ok"):
         st.error(f"‚ùå Erro ao enviar PDF: {resp_doc_json.get('description')}")
         return

    st.success("‚úÖ PDF enviado para o Telegram.")
    
    # 2. Envia a foto (se existir) em uma mensagem separada
    if image_url:
        try:
            url_photo = f"https://api.telegram.org/bot{token}/sendPhoto"
            
            # Faz o Telegram buscar a foto diretamente da URL
            data_photo = {
                "chat_id": TELEGRAM_CHAT_ID, 
                "photo": image_url,
                "caption": f"üñºÔ∏è Foto do Produto Principal: {produto}"
            }
            if thread_id is not None:
                data_photo["message_thread_id"] = thread_id

            resp_photo = requests.post(url_photo, data=data_photo)
            resp_photo_json = resp_photo.json()

            if resp_photo_json.get("ok"):
                st.success("‚úÖ Foto do produto principal enviada com sucesso!")
            else:
                 st.warning(f"‚ùå Erro ao enviar a foto do produto: {resp_photo_json.get('description')}")
                 
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erro ao tentar enviar a imagem. Erro: {e}")
            

def exibir_resultados(df: pd.DataFrame, imagens_dict: dict):
    """Exibe os resultados de precifica√ß√£o com tabela e imagens dos produtos."""
    if df is None or df.empty:
        st.info("‚ö†Ô∏è Nenhum produto dispon√≠vel para exibir.")
        return

    st.subheader("üìä Resultados Detalhados da Precifica√ß√£o")

    for idx, row in df.iterrows():
        with st.container():
            cols = st.columns([1, 3])
            with cols[0]:
                img_to_display = None
                
                # 1. Tenta carregar imagem do dicion√°rio (upload manual)
                img_to_display = imagens_dict.get(row.get("Produto"))

                # 2. Tenta carregar imagem dos bytes (se persistido)
                if img_to_display is None and row.get("Imagem") is not None and isinstance(row.get("Imagem"), bytes):
                    try:
                        img_to_display = row.get("Imagem")
                    except Exception:
                        pass # Continua tentando a URL

                # 3. Tenta carregar imagem da URL (se persistido)
                img_url = row.get("Imagem_URL")
                if img_to_display is None and img_url and isinstance(img_url, str) and img_url.startswith("http"):
                    st.image(img_url, width=100, caption="URL")
                elif img_to_display:
                    st.image(img_to_display, width=100, caption="Arquivo")
                else:
                    st.write("üñºÔ∏è N/A")
                    
            with cols[1]:
                st.markdown(f"**{row.get('Produto', '‚Äî')}**")
                st.write(f"üì¶ Quantidade: {row.get('Qtd', '‚Äî')}")
                
                custo_base = row.get('Custo Unit√°rio', 0.0)
                custo_total_unitario = row.get('Custo Total Unit√°rio', custo_base)

                st.write(f"üí∞ Custo Base: R$ {custo_base:.2f}")

                custos_extras_prod = row.get('Custos Extras Produto', 0.0)
                st.write(f"üõ† Rateio/Extras: R$ {custos_extras_prod:.2f}")

                if 'Custo Total Unit√°rio' in df.columns:
                    st.write(f"üí∏ Custo Total/Un: **R$ {custo_total_unitario:.2f}**")

                if "Margem (%)" in df.columns:
                    margem_val = row.get("Margem (%)", 0)
                    try:
                        margem_float = float(margem_val)
                    except Exception:
                        margem_float = 0
                    st.write(f"üìà Margem: **{margem_float:.2f}%**")
                
                if "Pre√ßo √† Vista" in df.columns:
                    st.write(f"üí∞ Pre√ßo √† Vista: **R$ {row.get('Pre√ßo √† Vista', 0):.2f}**")
                if "Pre√ßo no Cart√£o" in df.columns:
                    st.write(f"üí≥ Pre√ßo no Cart√£o: **R$ {row.get('Pre√ßo no Cart√£o', 0):.2f}**")


def processar_dataframe(df: pd.DataFrame, frete_total: float, custos_extras: float,
                        modo_margem: str, margem_fixa: float) -> pd.DataFrame:
    """Processa o DataFrame, aplica rateio, margem e calcula os pre√ßos finais."""
    if df.empty:
        # Garante que o DataFrame tem as colunas m√≠nimas esperadas para evitar erros de √≠ndice/coluna
        return pd.DataFrame(columns=[
            "Produto", "Qtd", "Custo Unit√°rio", "Custos Extras Produto", 
            "Custo Total Unit√°rio", "Margem (%)", "Pre√ßo √† Vista", "Pre√ßo no Cart√£o"
        ])

    df = df.copy()

    # Garante que as colunas de custo e quantidade s√£o num√©ricas
    for col in ["Qtd", "Custo Unit√°rio", "Margem (%)", "Custos Extras Produto"]:
        if col in df.columns:
            # Tenta converter, falhando para 0.0 se n√£o for poss√≠vel
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0.0)
        elif col not in df.columns:
            # Adiciona colunas ausentes com valor 0.0 se for necess√°rio para o c√°lculo
            df[col] = 0.0
            
    # --- C√°lculo do Rateio Global ---
    qtd_total = df["Qtd"].sum()
    rateio_unitario = 0
    if qtd_total > 0:
        rateio_unitario = (frete_total + custos_extras) / qtd_total

    # Calcular o custo total por unidade
    df["Custo Total Unit√°rio"] = df["Custo Unit√°rio"] + df["Custos Extras Produto"]

    # Processar margens conforme o modo selecionado
    if "Margem (%)" not in df.columns:
        df["Margem (%)"] = margem_fixa
    
    df["Margem (%)"] = df["Margem (%)"].apply(lambda x: x if pd.notna(x) else margem_fixa)


    # Calcular os pre√ßos finais
    df["Pre√ßo √† Vista"] = df["Custo Total Unit√°rio"] * (1 + df["Margem (%)"] / 100)
    # Taxa de cart√£o de 11.28% (para chegar a 0.8872 do pre√ßo de venda)
    df["Pre√ßo no Cart√£o"] = df["Pre√ßo √† Vista"] / 0.8872

    # Seleciona as colunas relevantes para o DataFrame final de exibi√ß√£o
    cols_to_keep = [
        "Produto", "Qtd", "Custo Unit√°rio", "Custos Extras Produto", 
        "Custo Total Unit√°rio", "Margem (%)", "Pre√ßo √† Vista", "Pre√ßo no Cart√£o", 
        "Imagem", "Imagem_URL" # Adicionada Imagem_URL para persist√™ncia no CSV
    ]
    
    # Mant√©m apenas as colunas que existem no DF
    df_final = df[[col for col in cols_to_keep if col in df.columns]]

    return df_final


def extrair_produtos_pdf(pdf_file) -> list:
    """Fun√ß√£o mock para extra√ß√£o de produtos de PDF."""
    # st.warning("Fun√ß√£o extrair_produtos_pdf ainda n√£o implementada. Use o carregamento manual ou de CSV.")
    return []


# Fun√ß√µes auxiliares gerais
def baixar_csv_aba(df, nome_arquivo, key_suffix=""):
    """Cria um bot√£o de download para o DataFrame."""
    csv = df.to_csv(index=False, encoding="utf-8-sig")
    st.download_button(
        f"‚¨áÔ∏è Baixar {nome_arquivo}",
        data=csv,
        file_name=nome_arquivo,
        mime="text/csv",
        key=f"download_button_{nome_arquivo.replace('.', '_')}_{key_suffix}"
    )

def _opcoes_para_lista(opcoes_str):
    """Converte string de op√ß√µes separadas por v√≠rgula em lista."""
    if pd.isna(opcoes_str) or not str(opcoes_str).strip():
        return []
    return [o.strip() for o in str(opcoes_str).split(",") if o.strip()]

def col_defs_para(aplicacao: str):
    """Filtra as defini√ß√µes de colunas extras por aplica√ß√£o."""
    if "campos" not in st.session_state or st.session_state.campos.empty:
        return pd.DataFrame(columns=COLUNAS_CAMPOS)
    df = st.session_state.campos
    return df[(df["Aplica√ß√£o"] == aplicacao) | (df["Aplica√ß√£o"] == "Ambos")].copy()

def garantir_colunas_extras(df: pd.DataFrame, aplicacao: str) -> pd.DataFrame:
    """Adiciona colunas extras ao DataFrame se ainda n√£o existirem."""
    defs = col_defs_para(aplicacao)
    for campo in defs["Campo"].tolist():
        if campo not in df.columns:
            df[campo] = ""
    return df

def render_input_por_tipo(label, tipo, opcoes, valor_padrao=None, key=None):
    """Renderiza um widget Streamlit baseado no tipo de campo definido."""
    if tipo == "N√∫mero":
        valor = float(valor_padrao) if (valor_padrao is not None and str(valor_padrao).strip() != "") else 0.0
        return st.number_input(label, min_value=0.0, format="%.2f", value=valor, key=key)
    elif tipo == "Sele√ß√£o":
        lista = _opcoes_para_lista(opcoes)
        valor_display = str(valor_padrao) if valor_padrao is not None and pd.notna(valor_padrao) else ""
        
        # Garante que o valor padr√£o atual est√° na lista, sen√£o adiciona ele na primeira posi√ß√£o
        if valor_display not in lista and valor_display != "":
            lista = [valor_display] + [o for o in lista if o != valor_display]
        elif valor_display == "" and lista:
            # Se n√£o tem valor padr√£o e tem op√ß√µes, usa a primeira como default
            valor_display = lista[0]
            
        try:
            index_padrao = lista.index(valor_display) if valor_display in lista else 0
        except ValueError:
            index_padrao = 0
            
        return st.selectbox(label, options=lista, index=index_padrao, key=key)
    else:
        return st.text_input(label, value=str(valor_padrao) if valor_padrao is not None else "", key=key)

# --- FIM FUN√á√ïES AUXILIARES GLOBAIS (DO PRECIFICA√á√ÉO) ---


# --- Fun√ß√µes e Constantes de Persist√™ncia (Mantidas do original) ---

# Importa a biblioteca PyGithub para gerenciamento de persist√™ncia
try:
    from github import Github
except ImportError:
    class Github:
        def __init__(self, token): pass
        def get_repo(self, repo_name): return self
        def update_file(self, path, msg, content, sha, branch): pass
        def create_file(self, path, msg, content, branch): pass

def ler_codigo_barras_api(image_bytes):
    """
    Decodifica c√≥digos de barras (1D e QR) usando a API p√∫blica ZXing.
    Mais robusta que WebQR porque suporta EAN/UPC/Code128 al√©m de QR Codes.
    """
    URL_DECODER_ZXING = "https://zxing.org/w/decode"
    
    try:
        # ‚ö†Ô∏è IMPORTANTE: ZXing espera o arquivo no campo 'f', n√£o 'file'
        files = {"f": ("barcode.png", image_bytes, "image/png")}
        
        response = requests.post(URL_DECODER_ZXING, files=files, timeout=30)

        if response.status_code != 200:
            if 'streamlit' in globals():
                st.error(f"‚ùå Erro na API ZXing. Status HTTP: {response.status_code}")
            return []

        text = response.text
        codigos = []

        # Parse simples do HTML retornado
        if "<pre>" in text:
            partes = text.split("<pre>")
            for p in partes[1:]:
                codigo = p.split("</pre>")[0].strip()
                if codigo and not codigo.startswith("Erro na decodifica√ß√£o"):
                    codigos.append(codigo)

        if not codigos and 'streamlit' in globals():
            # Alterado para toast para menos intrus√£o, caso a leitura falhe
            st.toast("‚ö†Ô∏è API ZXing n√£o retornou nenhum c√≥digo v√°lido. Tente novamente ou use uma imagem mais clara.")

        return codigos

    except ConnectionError as ce:
        if 'streamlit' in globals():
            st.error(f"‚ùå Erro de Conex√£o: O servidor ZXing recusou a conex√£o. Detalhe: {ce}")
        return []
        
    except RequestException as e:
        if 'streamlit' in globals():
            st.error(f"‚ùå Erro de Requisi√ß√£o (Timeout/Outro): Falha ao completar a chamada √† API ZXing. Detalhe: {e}")
        return []
    
    except Exception as e:
        if 'streamlit' in globals():
            st.error(f"‚ùå Erro inesperado: {e}")
        return []


def add_months(d: date, months: int) -> date:
    """Adiciona um n√∫mero espec√≠fico de meses a uma data."""
    month = d.month + months
    year = d.year + (month - 1) // 12
    month = (month - 1) % 12 + 1
    day = min(d.day, calendar.monthrange(year, month)[1])
    return date(year, month, day)

# ==================== CONFIGURA√á√ïES DO APLICATIVO E CONSTANTES ====================
try:
    TOKEN = st.secrets["GITHUB_TOKEN"]
    OWNER = st.secrets["REPO_OWNER"]
    REPO_NAME = st.secrets["REPO_NAME"]
    CSV_PATH = st.secrets["CSV_PATH"] 
    BRANCH = st.secrets.get("BRANCH", "main")
    
    GITHUB_TOKEN = TOKEN
    GITHUB_REPO = f"{OWNER}/{REPO_NAME}"
    GITHUB_BRANCH = BRANCH
    
except KeyError:
    TOKEN = "TOKEN_FICTICIO"
    OWNER = "user"
    REPO_NAME = "repo_default"
    CSV_PATH = "contas_a_pagar_receber.csv"
    BRANCH = "main"

    GITHUB_TOKEN = TOKEN
    GITHUB_REPO = f"{OWNER}/{REPO_NAME}"
    GITHUB_BRANCH = BRANCH

# Caminhos dos arquivos
URL_BASE_REPOS = f"https://raw.githubusercontent.com/{OWNER}/{REPO_NAME}/{BRANCH}/"
ARQ_PRODUTOS = "produtos_estoque.csv"
ARQ_LOCAL = "livro_caixa.csv" # Usado para backup local e constante
PATH_DIVIDAS = CSV_PATH
ARQ_COMPRAS = "historico_compras.csv"
ARQ_PROMOCOES = "promocoes.csv" 
COLUNAS_COMPRAS = ["Data", "Produto", "Quantidade", "Valor Total", "Cor", "FotoURL"] 

COMMIT_MESSAGE = "Atualiza livro caixa via Streamlit (com produtos/categorias)"
COMMIT_MESSAGE_DELETE = "Exclui movimenta√ß√µes do livro caixa"
COMMIT_MESSAGE_EDIT = "Edita movimenta√ß√£o via Streamlit"
COMMIT_MESSAGE_DEBT_REALIZED = "Conclui d√≠vidas pendentes"
COMMIT_MESSAGE_PROD = "Atualiza√ß√£o autom√°tica de estoque/produtos"

COLUNAS_PADRAO = ["Data", "Loja", "Cliente", "Valor", "Forma de Pagamento", "Tipo", "Produtos Vendidos", "Categoria", "Status", "Data Pagamento"]
COLUNAS_COMPLETAS_PROCESSADAS = COLUNAS_PADRAO + ["ID Vis√≠vel", "original_index", "Data_dt", "Saldo Acumulado", "Cor_Valor"]

FATOR_CARTAO = 0.8872
LOJAS_DISPONIVEIS = ["Doce&bella", "Papelaria", "Fotografia", "Outro"]
CATEGORIAS_SAIDA = ["Aluguel", "Sal√°rios/Pessoal", "Marketing/Publicidade", "Fornecedores/Mat√©ria Prima", "Despesas Fixas", "Impostos/Taxas", "Outro/Diversos", "N√£o Categorizado"]
FORMAS_PAGAMENTO = ["Dinheiro", "Cart√£o", "PIX", "Transfer√™ncia", "Outro"]


# --- Fun√ß√µes de Persist√™ncia (Coment√°rios omitidos para brevidade) ---

def to_float(valor_str):
    try:
        if isinstance(valor_str, (int, float)):
            return float(valor_str)
        return float(str(valor_str).replace(",", ".").strip())
    except:
        return 0.0
    
def prox_id(df, coluna_id="ID"):
    if df.empty:
        return "1"
    else:
        try:
            return str(pd.to_numeric(df[coluna_id], errors='coerce').fillna(0).astype(int).max() + 1)
        except:
            return str(len(df) + 1)

def hash_df(df):
    """
    Gera um hash para o DataFrame para detec√ß√£o de mudan√ßas.
    Fun√ß√£o do precificador, adaptada para o hash robusto.
    """
    df_temp = df.copy() 
    
    # Remove colunas que podem conter bytes ou objetos n√£o serializ√°veis facilmente
    for col in df_temp.select_dtypes(include=['datetime64[ns]']).columns:
        df_temp[col] = df_temp[col].astype(str)
        
    if "Imagem" in df_temp.columns:
        df_temp = df_temp.drop(columns=["Imagem"], errors='ignore')
    
    try:
        # Usa um m√©todo de hashing espec√≠fico para pandas
        return hashlib.md5(pd.util.hash_pandas_object(df_temp, index=False).values).hexdigest()
    except Exception as e:
        # Fallback para stringify JSON (mais lento, mas mais robusto para DFs complexos)
        try:
             # Converte colunas object para string expl√≠cita para garantir hash consistente
            for col in df_temp.select_dtypes(include=['object']).columns:
                 df_temp[col] = df_temp[col].astype(str)
            return hashlib.md5(df_temp.to_json().encode('utf-8')).hexdigest()
        except Exception as inner_e:
             # st.error(f"Erro interno no hash do DataFrame: {inner_e}") # Descomente para debug
             return "error"
             

def salvar_csv_no_github(token, repo, path, dataframe, branch="main", mensagem="Atualiza√ß√£o via app"):
    """Salva o DataFrame como CSV no GitHub via API (Vers√£o do Precificador)."""
    from requests import get, put
    
    # Remove a coluna 'Imagem' se ela existir, pois cont√©m bytes (e o hash j√° deveria ter feito isso)
    df_temp = dataframe.drop(columns=["Imagem"], errors='ignore') if "Imagem" in dataframe.columns else dataframe.copy()
    
    url = f"https://api.github.com/repos/{repo}/contents/{path}"
    conteudo = df_temp.to_csv(index=False)
    conteudo_b64 = base64.b64encode(conteudo.encode()).decode()
    headers = {"Authorization": f"token {token}"}
    
    try:
        # 1. Tenta obter o SHA (para update)
        r = get(url, headers=headers)
        r.raise_for_status() # Levanta exce√ß√£o para 4xx e 5xx
        sha = r.json().get("sha")
    except requests.exceptions.HTTPError as e:
        # 404 significa que o arquivo n√£o existe, sha = None
        if e.response.status_code == 404:
            sha = None
        else:
            st.error(f"‚ùå Erro ao tentar ler arquivo no GitHub: {e}")
            return False
    except Exception as e:
        st.error(f"‚ùå Erro de conex√£o ao tentar ler arquivo no GitHub: {e}")
        return False
        
    # 2. Envia o conte√∫do
    payload = {"message": mensagem, "content": conteudo_b64, "branch": branch}
    if sha: payload["sha"] = sha
    
    try:
        r2 = put(url, headers=headers, json=payload)
        r2.raise_for_status()
        # st.success(f"‚úÖ Arquivo `{path}` atualizado no GitHub!")
        return True 
    except requests.exceptions.HTTPError as e:
        st.error(f"‚ùå Erro ao salvar `{path}` no GitHub: {e.response.text}")
        return False
    except Exception as e:
        st.error(f"‚ùå Erro de conex√£o ao salvar no GitHub: {e}")
        return False


def load_csv_github(url: str) -> pd.DataFrame | None:
    try:
        response = requests.get(url)
        response.raise_for_status()
        df = pd.read_csv(StringIO(response.text), dtype=str)
        if df.empty or len(df.columns) < 2:
            return None
        return df
    except Exception:
        return None

def parse_date_yyyy_mm_dd(date_str):
    """Tenta converter uma string para objeto date."""
    if pd.isna(date_str) or not date_str:
        return None
    try:
        return datetime.strptime(str(date_str).split(" ")[0], "%Y-%m-%d").date()
    except:
        return None

@st.cache_data(show_spinner="Carregando promo√ß√µes...")
def carregar_promocoes():
    COLUNAS_PROMO = ["ID", "IDProduto", "NomeProduto", "Desconto", "DataInicio", "DataFim"]
    url_raw = f"https://raw.githubusercontent.com/{OWNER}/{REPO_NAME}/{BRANCH}/{ARQ_PROMOCOES}"
    df = load_csv_github(url_raw)
    if df is None or df.empty:
        df = pd.DataFrame(columns=COLUNAS_PROMO)
    for col in COLUNAS_PROMO:
        if col not in df.columns:
            df[col] = "" 
    return df[[col for col in COLUNAS_PROMO if col in df.columns]]

def norm_promocoes(df):
    """Normaliza o DataFrame de promo√ß√µes."""
    if df.empty: return df
    df = df.copy()
    df["Desconto"] = pd.to_numeric(df["Desconto"], errors='coerce').fillna(0.0)
    df["DataInicio"] = pd.to_datetime(df["DataInicio"], errors='coerce').dt.date
    df["DataFim"] = pd.to_datetime(df["DataFim"], errors='coerce').dt.date
    # Filtra promo√ß√µes expiradas
    df = df[df["DataFim"] >= date.today()] 
    return df

@st.cache_data(show_spinner="Carregando hist√≥rico de compras...")
def carregar_historico_compras():
    url_raw = f"https://raw.githubusercontent.com/{OWNER}/{REPO_NAME}/{BRANCH}/{ARQ_COMPRAS}"
    df = load_csv_github(url_raw)
    if df is None or df.empty:
        df = pd.DataFrame(columns=COLUNAS_COMPRAS)
    for col in COLUNAS_COMPRAS:
        if col not in df.columns:
            df[col] = "" 
    return df[[col for col in COLUNAS_COMPRAS if col in df.columns]]

# Manter essa fun√ß√£o para compatibilidade, mas ela √© apenas um placeholder no 333.py original
def salvar_historico_no_github(df: pd.DataFrame, commit_message: str):
    return True

@st.cache_data(show_spinner="Carregando dados...")
def carregar_livro_caixa():
    """Orquestra o carregamento do Livro Caixa."""
    df = None
    
    # 1. Tenta carregar do GitHub (usando a URL raw com o PATH_DIVIDAS / CSV_PATH)
    url_raw = f"https://raw.githubusercontent.com/{OWNER}/{REPO_NAME}/{BRANCH}/{PATH_DIVIDAS}"
    df = load_csv_github(url_raw)

    if df is None or df.empty:
        # 2. Fallback local/garantia de colunas
        try:
            df = pd.read_csv(ARQ_LOCAL, dtype=str)
        except Exception:
            df = pd.DataFrame(columns=COLUNAS_PADRAO)
        
    if df.empty:
        df = pd.DataFrame(columns=COLUNAS_PADRAO)

    # Garante que as colunas padr√£o existam
    for col in COLUNAS_PADRAO:
        if col not in df.columns:
            df[col] = "Realizada" if col == "Status" else "" 
            
    # Adiciona RecorrenciaID se n√£o existir
    if 'RecorrenciaID' not in df.columns:
        df['RecorrenciaID'] = ''
        
    # Retorna apenas as colunas padr√£o na ordem correta
    cols_to_return = COLUNAS_PADRAO + ["RecorrenciaID"]
    return df[[col for col in cols_to_return if col in df.columns]]


def salvar_dados_no_github(df: pd.DataFrame, commit_message: str):
    """
    Salva o DataFrame CSV do Livro Caixa no GitHub usando a API e tamb√©m localmente (backup).
    Essa fun√ß√£o garante a persist√™ncia de dados para o Streamlit.
    """
    
    # 1. Backup local (Tenta salvar, ignora se falhar)
    try:
        # ARQ_LOCAL = "livro_caixa.csv"
        df.to_csv(ARQ_LOCAL, index=False, encoding="utf-8-sig") 
    except Exception:
        pass

    # 2. Prepara DataFrame para envio ao GitHub
    df_temp = df.copy()
    
    # Prepara os dados de data para serem salvos como string no formato YYYY-MM-DD
    for col_date in ['Data', 'Data Pagamento']:
        if col_date in df_temp.columns:
            df_temp[col_date] = pd.to_datetime(df_temp[col_date], errors='coerce').apply(
                lambda x: x.strftime('%Y-%m-%d') if pd.notnull(x) else ''
            )

    try:
        g = Github(TOKEN)
        repo = g.get_repo(f"{OWNER}/{REPO_NAME}")
        csv_string = df_temp.to_csv(index=False, encoding="utf-8-sig")

        try:
            # Tenta obter o SHA do conte√∫do atual
            # PATH_DIVIDAS = CSV_PATH (Caminho do arquivo no reposit√≥rio)
            contents = repo.get_contents(PATH_DIVIDAS, ref=BRANCH)
            # Atualiza o arquivo
            repo.update_file(contents.path, commit_message, csv_string, contents.sha, branch=BRANCH)
            st.success("üìÅ Livro Caixa salvo (atualizado) no GitHub!")
        except Exception:
            # Cria o arquivo (se n√£o existir)
            repo.create_file(PATH_DIVIDAS, commit_message, csv_string, branch=BRANCH)
            st.success("üìÅ Livro Caixa salvo (criado) no GitHub!")

        return True

    except Exception as e:
        st.error(f"‚ùå Erro ao salvar no GitHub: {e}")
        st.error("Verifique se seu 'GITHUB_TOKEN' tem permiss√µes e se o reposit√≥rio existe.")
        return False


@st.cache_data(show_spinner=False)
def processar_dataframe_livro_caixa(df):
    for col in COLUNAS_PADRAO:
        if col not in df.columns: df[col] = ""
    if 'RecorrenciaID' not in df.columns: df['RecorrenciaID'] = ''
    if df.empty: return pd.DataFrame(columns=COLUNAS_COMPLETAS_PROCESSADAS)
    df_proc = df.copy()
    df_proc["Valor"] = pd.to_numeric(df_proc["Valor"], errors="coerce").fillna(0.0)
    df_proc["Data"] = pd.to_datetime(df_proc["Data"], errors='coerce').dt.date
    df_proc["Data_dt"] = pd.to_datetime(df_proc["Data"], errors='coerce')
    df_proc["Data Pagamento"] = pd.to_datetime(df_proc["Data Pagamento"], errors='coerce').dt.date
    df_proc.dropna(subset=['Data_dt'], inplace=True)
    df_proc = df_proc.reset_index(drop=False) 
    df_proc.rename(columns={'index': 'original_index'}, inplace=True)
    df_proc['Saldo Acumulado'] = 0.0 
    df_realizadas = df_proc[df_proc['Status'] == 'Realizada'].copy()
    if not df_realizadas.empty:
        df_realizadas_sorted_asc = df_realizadas.sort_values(by=['Data_dt', 'original_index'], ascending=[True, True]).reset_index(drop=True)
        df_realizadas_sorted_asc['TEMP_SALDO'] = df_realizadas_sorted_asc['Valor'].cumsum()
        df_proc = pd.merge(df_proc, df_realizadas_sorted_asc[['original_index', 'TEMP_SALDO']], on='original_index', how='left')
        df_proc['Saldo Acumulado'] = df_proc['TEMP_SALDO'].fillna(method='ffill').fillna(0)
        df_proc.drop(columns=['TEMP_SALDO'], inplace=True, errors='ignore')
    df_proc = df_proc.sort_values(by="Data_dt", ascending=False).reset_index(drop=True)
    df_proc.insert(0, 'ID Vis√≠vel', df_proc.index + 1)
    df_proc['Cor_Valor'] = df_proc.apply(lambda row: 'green' if row['Tipo'] == 'Entrada' and row['Valor'] >= 0 else 'red', axis=1)
    return df_proc

def calcular_resumo(df):
    df_realizada = df[df['Status'] == 'Realizada']
    if df_realizada.empty: return 0.0, 0.0, 0.0
    total_entradas = df_realizada[df_realizada["Tipo"] == "Entrada"]["Valor"].sum()
    total_saidas = abs(df_realizada[df_realizada["Tipo"] == "Sa√≠da"]["Valor"].sum()) 
    saldo = df_realizada["Valor"].sum()
    return total_entradas, total_saidas, saldo

def format_produtos_resumo(produtos_json):
    if pd.isna(produtos_json) or produtos_json == "": return ""
    if produtos_json:
        try:
            try:
                produtos = json.loads(produtos_json)
            except json.JSONDecodeError:
                produtos = ast.literal_eval(produtos_json)
            if not isinstance(produtos, list) or not all(isinstance(p, dict) for p in produtos): return "Dados inv√°lidos"
            count = len(produtos)
            if count > 0:
                primeiro = produtos[0].get('Produto', 'Produto Desconhecido')
                total_custo = 0.0
                total_venda = 0.0
                for p in produtos:
                    try:
                        qtd = float(p.get('Quantidade', 0))
                        preco_unitario = float(p.get('Pre√ßo Unit√°rio', 0))
                        custo_unitario = float(p.get('Custo Unit√°rio', 0))
                        total_custo += custo_unitario * qtd
                        total_venda += preco_unitario * qtd
                    except ValueError: continue
                lucro = total_venda - total_custo
                lucro_str = f"| Lucro R$ {lucro:,.2f}" if lucro != 0 else ""
                return f"{count} item(s): {primeiro}... {lucro_str}"
        except:
            return "Erro na formata√ß√£o/JSON Inv√°lido"
    return ""

def highlight_value(row):
    color = row['Cor_Valor']
    return [f'color: {color}' if col == 'Valor' else '' for col in row.index]

@st.cache_data(show_spinner="Carregando produtos do estoque...")
def inicializar_produtos():
    COLUNAS_PRODUTOS = [
        "ID", "Nome", "Marca", "Categoria", "Quantidade", "PrecoCusto", 
        "PrecoVista", "PrecoCartao", "Validade", "FotoURL", "CodigoBarras", "PaiID"
    ]
    if "produtos" not in st.session_state:
        url_raw = f"https://raw.githubusercontent.com/{OWNER}/{REPO_NAME}/{BRANCH}/{ARQ_PRODUTOS}"
        df_carregado = load_csv_github(url_raw)
        if df_carregado is None or df_carregado.empty:
            df_base = pd.DataFrame(columns=COLUNAS_PRODUTOS)
        else:
            df_base = df_carregado
        for col in COLUNAS_PRODUTOS:
            if col not in df_base.columns: df_base[col] = ''
        df_base["Quantidade"] = pd.to_numeric(df_base["Quantidade"], errors='coerce').fillna(0).astype(int)
        df_base["PrecoCusto"] = pd.to_numeric(df_base["PrecoCusto"], errors='coerce').fillna(0.0)
        df_base["PrecoVista"] = pd.to_numeric(df_base["PrecoVista"], errors='coerce').fillna(0.0)
        df_base["PrecoCartao"] = pd.to_numeric(df_base["PrecoCartao"], errors='coerce').fillna(0.0)
        
        # Converte validade para Date para facilitar a l√≥gica de promo√ß√µes
        df_base["Validade"] = pd.to_datetime(df_base["Validade"], errors='coerce').dt.date
        
        st.session_state.produtos = df_base
    return st.session_state.produtos

def ajustar_estoque(id_produto, quantidade, operacao="debitar"):
    produtos_df = st.session_state.produtos
    idx_produto = produtos_df[produtos_df["ID"] == id_produto].index
    if not idx_produto.empty:
        idx = idx_produto[0]
        qtd_atual = produtos_df.loc[idx, "Quantidade"]
        if operacao == "debitar":
            nova_qtd = qtd_atual - quantidade
            produtos_df.loc[idx, "Quantidade"] = max(0, nova_qtd)
            return True
        elif operacao == "creditar":
            nova_qtd = qtd_atual + quantidade
            produtos_df.loc[idx, "Quantidade"] = nova_qtd
            return True
    return False

def salvar_produtos_no_github(dataframe, commit_message):
    return True

def save_data_github_produtos(df, path, commit_message):
    return False 

def callback_salvar_novo_produto(produtos, tipo_produto, nome, marca, categoria, qtd, preco_custo, preco_vista, validade, foto_url, codigo_barras, varia√ß√µes):
    if not nome:
        st.error("O nome do produto √© obrigat√≥rio.")
        return False
        
    def add_product_row(df, p_id, p_nome, p_marca, p_categoria, p_qtd, p_custo, p_vista, p_cartao, p_validade, p_foto, p_cb, p_pai_id=None):
        novo_id = prox_id(df, "ID")
        
        novo = {
            "ID": novo_id,
            "Nome": p_nome.strip(),
            "Marca": p_marca.strip(),
            "Categoria": p_categoria.strip(),
            "Quantidade": int(p_qtd),
            "PrecoCusto": to_float(p_custo),
            "PrecoVista": to_float(p_vista),
            "PrecoCartao": to_float(p_cartao),
            "Validade": str(p_validade),
            "FotoURL": p_foto.strip(),
            "CodigoBarras": str(p_cb).strip(),
            "PaiID": str(p_pai_id).strip() if p_pai_id else ""
        }
        return pd.concat([df, pd.DataFrame([novo])], ignore_index=True), novo_id
    
    # Placeholder para save_csv_github (deve ser ajustado conforme a implementa√ß√£o real de persist√™ncia de produtos)
    def save_csv_github(df, path, message):
        # Usando a fun√ß√£o gen√©rica de salvamento do precificador
        df_temp = df.copy()
        for col in ['Validade']:
            if col in df_temp.columns:
                df_temp[col] = pd.to_datetime(df_temp[col], errors='coerce').apply(
                    lambda x: x.strftime('%Y-%m-%d') if pd.notnull(x) else ''
                )
        return salvar_csv_no_github(GITHUB_TOKEN, GITHUB_REPO, path, df_temp, GITHUB_BRANCH, message)


    if tipo_produto == "Produto simples":
        produtos, new_id = add_product_row(
            produtos,
            None,
            nome, marca, categoria,
            qtd, preco_custo, preco_vista, 
            round(to_float(preco_vista) / FATOR_CARTAO, 2) if to_float(preco_vista) > 0 else 0.0,
            validade, foto_url, codigo_barras
        )
        if save_csv_github(produtos, ARQ_PRODUTOS, f"Novo produto simples: {nome} (ID {new_id})"):
            st.session_state.produtos = produtos
            inicializar_produtos.clear()
            st.success(f"Produto '{nome}' cadastrado com sucesso!")
            # Limpa campos do formul√°rio simples
            st.session_state.cad_nome = ""
            st.session_state.cad_marca = ""
            st.session_state.cad_categoria = ""
            st.session_state.cad_qtd = 0
            st.session_state.cad_preco_custo = "0,00"
            st.session_state.cad_preco_vista = "0,00"
            st.session_state.cad_validade = date.today()
            st.session_state.cad_foto_url = ""
            st.session_state.cad_cb = ""
            if "codigo_barras" in st.session_state: del st.session_state["codigo_barras"]
            return True
        return False
    
    elif tipo_produto == "Produto com varia√ß√µes (grade)":
        
        # 1. Cria o Produto Pai (sem estoque)
        produtos, pai_id = add_product_row(
            produtos,
            None,
            nome, marca, categoria,
            0, 0.0, 0.0, 0.0,
            validade, foto_url, codigo_barras,
            p_pai_id=None # Este √© o pai
        )
        
        # 2. Cria as Varia√ß√µes (Filhos)
        cont_variacoes = 0
        for var in varia√ß√µes:
            if var["Nome"] and var["Quantidade"] > 0:
                produtos, _ = add_product_row(
                    produtos,
                    None,
                    f"{nome} ({var['Nome']})", marca, categoria,
                    var["Quantidade"], var["PrecoCusto"], var["PrecoVista"], var["PrecoCartao"],
                    validade, foto_url, var["CodigoBarras"],
                    p_pai_id=pai_id # Refer√™ncia ao Pai
                )
                cont_variacoes += 1
                
        if cont_variacoes > 0:
            if save_csv_github(produtos, ARQ_PRODUTOS, f"Novo produto com grade: {nome} ({cont_variacoes} varia√ß√µes)"):
                st.session_state.produtos = produtos
                inicializar_produtos.clear()
                st.success(f"Produto '{nome}' com {cont_variacoes} varia√ß√µes cadastrado com sucesso!")
                # Limpa campos do formul√°rio complexo
                st.session_state.cad_nome = ""
                st.session_state.cad_marca = ""
                st.session_state.cad_categoria = ""
                st.session_state.cad_validade = date.today()
                st.session_state.cad_foto_url = ""
                if "codigo_barras" in st.session_state: del st.session_state["codigo_barras"]
                st.session_state.cb_grade_lidos = {}
                return True
            return False
        else:
            # Se n√£o adicionou varia√ß√µes, exclui o pai criado (ou avisa)
            produtos = produtos[produtos["ID"] != pai_id]
            st.session_state.produtos = produtos
            st.error("Nenhuma varia√ß√£o v√°lida foi fornecida. O produto principal n√£o foi salvo.")
            return False
    return False

def callback_adicionar_manual(nome, qtd, preco, custo):
    if nome and qtd > 0:
        st.session_state.lista_produtos.append({
            "Produto_ID": "", 
            "Produto": nome,
            "Quantidade": qtd,
            "Pre√ßo Unit√°rio": preco,
            "Custo Unit√°rio": custo 
        })
        st.session_state.input_nome_prod_manual = ""
        st.session_state.input_qtd_prod_manual = 1.0
        st.session_state.input_preco_prod_manual = 0.01
        st.session_state.input_custo_prod_manual = 0.00
        st.session_state.input_produto_selecionado = "" 
        
def callback_adicionar_estoque(prod_id, prod_nome, qtd, preco, custo, estoque_disp):
    
    # √â importante carregar as promo√ß√µes aqui, pois √© onde o desconto √© aplicado
    promocoes = norm_promocoes(carregar_promocoes())
    hoje = date.today()
    
    # Verifica se o produto tem promo√ß√£o ativa hoje
    promocao_ativa = promocoes[
        (promocoes["IDProduto"] == prod_id) & 
        (promocoes["DataInicio"] <= hoje) & 
        (promocoes["DataFim"] >= hoje)
    ]
    
    # Se houver promo√ß√£o, aplica o desconto
    preco_unitario_final = preco
    desconto_aplicado = 0.0
    if not promocao_ativa.empty:
        desconto_aplicado = promocao_ativa.iloc[0]["Desconto"] / 100.0
        preco_unitario_final = preco * (1 - desconto_aplicado)
        st.toast(f"üè∑Ô∏è Promo√ß√£o de {promocao_ativa.iloc[0]['Desconto']:.0f}% aplicada a {prod_nome}!")

    if qtd > 0 and qtd <= estoque_disp:
        st.session_state.lista_produtos.append({
            "Produto_ID": prod_id, 
            "Produto": prod_nome,
            "Quantidade": qtd,
            # Usa o pre√ßo com desconto, se houver
            "Pre√ßo Unit√°rio": round(float(preco_unitario_final), 2), 
            "Custo Unit√°rio": custo 
        })
        st.session_state.input_produto_selecionado = ""
    else:
        st.warning("A quantidade excede o estoque ou √© inv√°lida.")

# ==============================================================================
# FUN√á√ïES AUXILIARES PARA HOME E AN√ÅLISE DE PRODUTOS
# ==============================================================================

@st.cache_data(show_spinner="Calculando mais vendidos...")
def get_most_sold_products(df_movimentacoes):
    """
    Calcula os produtos mais vendidos (por quantidade de itens vendidos).
    CORRIGIDO: Tratamento de erro robusto para garantir a chave 'Produto_ID'.
    """
    
    # 1. Filtra apenas as transa√ß√µes de Entrada (vendas) que foram Realizadas
    df_vendas = df_movimentacoes[
        (df_movimentacoes["Tipo"] == "Entrada") & 
        (df_movimentacoes["Status"] == "Realizada") &
        (df_movimentacoes["Produtos Vendidos"].notna()) &
        (df_movimentacoes["Produtos Vendidos"] != "")
    ].copy()

    if df_vendas.empty:
        # Garante que o DataFrame de sa√≠da tenha as colunas esperadas para o merge
        return pd.DataFrame(columns=["Produto_ID", "Quantidade Total Vendida"])

    vendas_list = []
    
    # 2. Desempacota o JSON de Produtos Vendidos
    for produtos_json in df_vendas["Produtos Vendidos"]:
        try:
            # Tenta usar json.loads, mas usa ast.literal_eval como fallback
            try:
                produtos = json.loads(produtos_json)
            except (json.JSONDecodeError, TypeError):
                produtos = ast.literal_eval(produtos_json)
            
            if isinstance(produtos, list):
                for item in produtos:
                    # CORRE√á√ÉO: Garante que 'Produto_ID' existe antes de tentar acess√°-lo.
                    # Se n√£o existir (dados antigos), pula o item.
                    produto_id = str(item.get("Produto_ID"))
                    if produto_id and produto_id != "None":
                         vendas_list.append({
                            "Produto_ID": produto_id,
                            "Quantidade": to_float(item.get("Quantidade", 0))
                        })
        except Exception:
            # Ignora linhas com JSON de produto totalmente malformado
            continue
            
    df_vendas_detalhada = pd.DataFrame(vendas_list)
    
    if df_vendas_detalhada.empty:
        # Garante a coluna Produto_ID mesmo que vazia para o merge na homepage
        return pd.DataFrame(columns=["Produto_ID", "Quantidade Total Vendida"])

    # 3. Soma as quantidades por Produto_ID
    df_mais_vendidos = df_vendas_detalhada.groupby("Produto_ID")["Quantidade"].sum().reset_index()
    df_mais_vendidos.rename(columns={"Quantidade": "Quantidade Total Vendida"}, inplace=True)
    df_mais_vendidos.sort_values(by="Quantidade Total Vendida", ascending=False, inplace=True)
    
    return df_mais_vendidos

# ==============================================================================
# P√ÅGINAS DO NOVO M√ìDULO (PRECIFICA√á√ÉO)
# ==============================================================================

# ==============================================================================
# FUN√á√ÉO DA P√ÅGINA: PRECIFICA√á√ÉO COMPLETA (Vers√£o Geral)
# ==============================================================================

def precificacao_completa():
    st.title("üí∏ Precificador de Produtos (Geral)")
    
    # --- Configura√ß√µes do GitHub para SALVAR ---
    # Usando as vari√°veis globais do app.py
    global GITHUB_TOKEN, GITHUB_REPO, GITHUB_BRANCH 
    PATH_PRECFICACAO = "precificacao.csv"
    ARQ_CAIXAS = f"https://raw.githubusercontent.com/{OWNER}/{REPO_NAME}/{BRANCH}/" + PATH_PRECFICACAO
    imagens_dict = {}
    
    # ----------------------------------------------------
    # Inicializa√ß√£o e Configura√ß√µes
    # ----------------------------------------------------
    
    # Inicializa√ß√£o de vari√°veis de estado da Precifica√ß√£o
    if "produtos_manuais" not in st.session_state:
        st.session_state.produtos_manuais = pd.DataFrame(columns=[
            "Produto", "Qtd", "Custo Unit√°rio", "Custos Extras Produto", "Margem (%)", "Imagem", "Imagem_URL"
        ])
    
    # Garante a coluna Imagem_URL para produtos existentes que possam ter sido carregados
    if "Imagem_URL" not in st.session_state.produtos_manuais.columns:
        st.session_state.produtos_manuais["Imagem_URL"] = ""

    # Inicializa√ß√£o de df_produtos_geral com dados de exemplo (se necess√°rio)
    if "df_produtos_geral" not in st.session_state or st.session_state.df_produtos_geral.empty:
        exemplo_data = [
            {"Produto": "Produto A", "Qtd": 10, "Custo Unit√°rio": 5.0, "Margem (%)": 20, "Pre√ßo √† Vista": 6.0, "Pre√ßo no Cart√£o": 6.5},
            {"Produto": "Produto B", "Qtd": 5, "Custo Unit√°rio": 3.0, "Margem (%)": 15, "Pre√ßo √† Vista": 3.5, "Pre√ßo no Cart√£o": 3.8},
        ]
        df_base = pd.DataFrame(exemplo_data)
        df_base["Custos Extras Produto"] = 0.0
        df_base["Imagem"] = None
        df_base["Imagem_URL"] = ""

        st.session_state.df_produtos_geral = processar_dataframe(df_base, 0.0, 0.0, "Margem fixa", 30.0)
        st.session_state.produtos_manuais = df_base.copy()


    if "frete_manual" not in st.session_state:
        st.session_state["frete_manual"] = 0.0
    if "extras_manual" not in st.session_state:
        st.session_state["extras_manual"] = 0.0
    if "modo_margem" not in st.session_state:
        st.session_state["modo_margem"] = "Margem fixa"
    if "margem_fixa" not in st.session_state:
        st.session_state["margem_fixa"] = 30.0

    frete_total = st.session_state.get("frete_manual", 0.0)
    custos_extras = st.session_state.get("extras_manual", 0.0)
    modo_margem = st.session_state.get("modo_margem", "Margem fixa")
    margem_fixa = st.session_state.get("margem_fixa", 30.0)
    
    
    # ----------------------------------------------------
    # L√≥gica de Salvamento Autom√°tico
    # ----------------------------------------------------
    
    # Prepara o DataFrame para salvar: remove a coluna 'Imagem' que cont√©m bytes
    df_to_hash = st.session_state.produtos_manuais.drop(columns=["Imagem"], errors='ignore')

    # 1. Inicializa o hash para o estado da precifica√ß√£o
    if "hash_precificacao" not in st.session_state:
        st.session_state.hash_precificacao = hash_df(df_to_hash)

    # 2. Verifica se houve altera√ß√£o nos produtos manuais para salvar automaticamente
    novo_hash = hash_df(df_to_hash)
    if novo_hash != st.session_state.hash_precificacao:
        if novo_hash != "error": # Evita salvar se a fun√ß√£o hash falhou
            salvar_csv_no_github(
                GITHUB_TOKEN,
                GITHUB_REPO,
                PATH_PRECFICACAO,
                df_to_hash, # Salva o df sem a coluna 'Imagem'
                GITHUB_BRANCH,
                mensagem="‚ôªÔ∏è Altera√ß√£o autom√°tica na precifica√ß√£o"
            )
            st.session_state.hash_precificacao = novo_hash


    # ----------------------------------------------------
    # Tabela Geral (com Edi√ß√£o e Exclus√£o)
    # ----------------------------------------------------
    st.subheader("Produtos cadastrados (Clique no √≠ndice da linha e use DEL para excluir)")
    
    cols_display = [
        "Produto", "Qtd", "Custo Unit√°rio", "Custos Extras Produto", 
        "Custo Total Unit√°rio", "Margem (%)", "Pre√ßo √† Vista", "Pre√ßo no Cart√£o"
    ]
    cols_to_show = [col for col in cols_display if col in st.session_state.df_produtos_geral.columns]

    editado_df = st.data_editor(
        st.session_state.df_produtos_geral[cols_to_show],
        num_rows="dynamic", # Permite que o usu√°rio adicione ou remova linhas
        use_container_width=True,
        key="editor_produtos_geral"
    )

    original_len = len(st.session_state.df_produtos_geral)
    edited_len = len(editado_df)
    
    # 1. L√≥gica de Exclus√£o
    if edited_len < original_len:
        
        # Filtra os produtos_manuais para manter apenas aqueles que sobreviveram na edi√ß√£o
        produtos_manuais_filtrado = st.session_state.produtos_manuais[
            st.session_state.produtos_manuais['Produto'].isin(editado_df['Produto'])
        ].copy()
        
        st.session_state.produtos_manuais = produtos_manuais_filtrado.reset_index(drop=True)

        # Atualiza o DataFrame geral
        st.session_state.df_produtos_geral = processar_dataframe(
            st.session_state.produtos_manuais, frete_total, custos_extras, modo_margem, margem_fixa
        )
        
        st.success("‚úÖ Produto exclu√≠do da lista e sincronizado.")
        st.rerun()
        
    # 2. L√≥gica de Edi√ß√£o de Dados
    elif not editado_df.equals(st.session_state.df_produtos_geral[cols_to_show]):
        
        # 2a. Sincroniza as mudan√ßas essenciais de volta ao produtos_manuais
        for idx, row in editado_df.iterrows():
            produto_nome = str(row.get('Produto'))
            
            # Encontra o √≠ndice correspondente no produtos_manuais
            manual_idx = st.session_state.produtos_manuais[st.session_state.produtos_manuais['Produto'] == produto_nome].index
            
            if not manual_idx.empty:
                manual_idx = manual_idx[0]
                
                # O Custo Unit√°rio (base) e a Margem s√£o os campos que realmente importam para o rec√°lculo
                st.session_state.produtos_manuais.loc[manual_idx, "Produto"] = produto_nome
                st.session_state.produtos_manuais.loc[manual_idx, "Qtd"] = row.get("Qtd", 1)
                st.session_state.produtos_manuais.loc[manual_idx, "Custo Unit√°rio"] = row.get("Custo Unit√°rio", 0.0)
                st.session_state.produtos_manuais.loc[manual_idx, "Margem (%)"] = row.get("Margem (%)", margem_fixa)
                st.session_state.produtos_manuais.loc[manual_idx, "Custos Extras Produto"] = row.get("Custos Extras Produto", 0.0)


        # 2b. Recalcula o DataFrame geral com base no manual atualizado
        st.session_state.df_produtos_geral = processar_dataframe(
            st.session_state.produtos_manuais, frete_total, custos_extras, modo_margem, margem_fixa
        )
        
        st.success("‚úÖ Dados editados e precifica√ß√£o recalculada!")
        st.rerun()

    # 3. L√≥gica de Adi√ß√£o (apenas alerta)
    elif edited_len > original_len:
        st.warning("‚ö†Ô∏è Use o formul√°rio 'Novo Produto Manual' ou o carregamento de CSV para adicionar produtos.")
        # Reverte a adi√ß√£o no df_produtos_geral
        st.session_state.df_produtos_geral = st.session_state.df_produtos_geral
        st.rerun() 


    if st.button("üì§ Gerar PDF e enviar para Telegram", key='precificacao_pdf_button'):
        if st.session_state.df_produtos_geral.empty:
            st.warning("‚ö†Ô∏è Nenhum produto para gerar PDF.")
        else:
            pdf_io = gerar_pdf(st.session_state.df_produtos_geral)
            # Passa o DataFrame completo para a fun√ß√£o de envio
            enviar_pdf_telegram(pdf_io, st.session_state.df_produtos_geral, thread_id=TOPICO_ID)
    
    st.markdown("---")
    
    # ----------------------------------------------------
    # Abas de Precifica√ß√£o
    # ----------------------------------------------------
    
    tab_pdf, tab_manual, tab_github = st.tabs([
        "üìÑ Precificador PDF (Mock)",
        "‚úçÔ∏è Precificador Manual",
        "üì• Carregar CSV (Geral)"
    ])

    # === Tab PDF ===
    with tab_pdf:
        st.markdown("---")
        pdf_file = st.file_uploader("üì§ Selecione o PDF da nota fiscal ou lista de compras", type=["pdf"])
        if pdf_file:
            st.warning("A extra√ß√£o de dados do PDF est√° em desenvolvimento e n√£o est√° ativa.")
            try:
                produtos_pdf = extrair_produtos_pdf(pdf_file)
                if not produtos_pdf:
                    st.warning("‚ö†Ô∏è Nenhum produto encontrado no PDF. Use o CSV de exemplo abaixo.")
                # Restante da l√≥gica de carregamento do PDF omitida, pois a fun√ß√£o `extrair_produtos_pdf` √© mockada.
            except Exception as e:
                st.error(f"‚ùå Erro ao processar o PDF: {e}")
        else:
            st.info("üìÑ Fa√ßa upload de um arquivo PDF para come√ßar.")
            if st.button("üì• Carregar CSV de exemplo (Geral)"):
                df_exemplo = load_csv_github(ARQ_CAIXAS)
                if not df_exemplo.empty:
                    df_exemplo["Custos Extras Produto"] = 0.0
                    df_exemplo["Imagem"] = None
                    if "Imagem_URL" not in df_exemplo.columns:
                        df_exemplo["Imagem_URL"] = ""

                    st.session_state.produtos_manuais = df_exemplo.copy()
                    st.session_state.df_produtos_geral = processar_dataframe(
                        df_exemplo, frete_total, custos_extras, modo_margem, margem_fixa
                    )
                    exibir_resultados(st.session_state.df_produtos_geral, imagens_dict)
                    st.rerun()

    # === Tab Manual ===
    with tab_manual:
        st.markdown("---")
        aba_prec_manual, aba_rateio = st.tabs(["‚úçÔ∏è Novo Produto Manual", "üî¢ Rateio Manual"])

        with aba_rateio:
            st.subheader("üî¢ C√°lculo de Rateio Unit√°rio (Frete + Custos Extras)")
            col_r1, col_r2, col_r3 = st.columns(3)
            with col_r1:
                frete_manual = st.number_input("üöö Frete Total (R$)", min_value=0.0, step=0.01, key="frete_manual")
            with col_r2:
                extras_manual = st.number_input("üõ† Custos Extras (R$)", min_value=0.0, step=0.01, key="extras_manual")
            with col_r3:
                qtd_total_produtos = st.session_state.df_produtos_geral["Qtd"].sum() if "Qtd" in st.session_state.df_produtos_geral.columns else 0
                st.markdown(f"üì¶ **Qtd. Total de Produtos no DF:** {qtd_total_produtos}")
                
            qtd_total_manual = st.number_input("üì¶ Qtd. Total para Rateio (ajuste)", min_value=1, step=1, value=qtd_total_produtos or 1, key="qtd_total_manual_override")


            if qtd_total_manual > 0:
                rateio_calculado = (frete_manual + extras_manual) / qtd_total_manual
            else:
                rateio_calculado = 0.0

            st.session_state["rateio_manual"] = round(rateio_calculado, 4)
            st.markdown(f"üí∞ **Rateio Unit√°rio Calculado:** R$ {rateio_calculado:,.4f}")
            
            if st.button("üîÑ Aplicar Novo Rateio aos Produtos Existentes", key="aplicar_rateio_btn"):
                # A re-aplica√ß√£o do rateio exige que se use o df_produtos_manuais como base
                # para garantir que todos os campos de input sejam recalculados.
                st.session_state.df_produtos_geral = processar_dataframe(
                    st.session_state.produtos_manuais,
                    frete_total,
                    custos_extras,
                    modo_margem,
                    margem_fixa
                )
                st.success("‚úÖ Rateio aplicado! Verifique a tabela principal.")
                st.rerun() 

        with aba_prec_manual:
            # Rerunning para limpar o formul√°rio ap√≥s a adi√ß√£o
            if st.session_state.get("rerun_after_add"):
                del st.session_state["rerun_after_add"]
                st.rerun()

            st.subheader("Adicionar novo produto")

            col1, col2 = st.columns(2)
            with col1:
                produto = st.text_input("üìù Nome do Produto", key="input_produto_manual")
                quantidade = st.number_input("üì¶ Quantidade", min_value=1, step=1, key="input_quantidade_manual")
                valor_pago = st.number_input("üí∞ Valor Pago (Custo Unit√°rio Base R$)", min_value=0.0, step=0.01, key="input_valor_pago_manual")
                
                # --- Campo de URL da Imagem ---
                imagem_url = st.text_input("üîó URL da Imagem (opcional)", key="input_imagem_url_manual")
                # --- FIM NOVO ---

                
            with col2:
                valor_default_rateio = st.session_state.get("rateio_manual", 0.0)
                custo_extra_produto = st.number_input(
                    "üí∞ Custos extras do Produto (R$) + Rateio Global", min_value=0.0, step=0.01, value=valor_default_rateio, key="input_custo_extra_manual"
                )
                preco_final_sugerido = st.number_input(
                    "üí∏ Valor Final Sugerido (Pre√ßo √† Vista) (R$)", min_value=0.0, step=0.01, key="input_preco_sugerido_manual"
                )
                
                # Uploader de arquivo (mantido como alternativa)
                imagem_file = st.file_uploader("üñºÔ∏è Foto do Produto (Upload - opcional)", type=["png", "jpg", "jpeg"], key="imagem_manual")


            custo_total_unitario = valor_pago + custo_extra_produto

            if preco_final_sugerido > 0:
                margem_calculada = 0.0
                if custo_total_unitario > 0:
                    margem_calculada = (preco_final_sugerido / custo_total_unitario - 1) * 100
                margem_manual = round(margem_calculada, 2)
                st.info(f"üßÆ Margem calculada automaticamente (com base no pre√ßo sugerido): {margem_manual:.2f}%")
                preco_a_vista_calc = preco_final_sugerido
            else:
                margem_manual = st.number_input("üßÆ Margem de Lucro (%)", min_value=0.0, value=30.0, key="input_margem_manual")
                preco_a_vista_calc = custo_total_unitario * (1 + margem_manual / 100)

            preco_no_cartao_calc = preco_a_vista_calc / 0.8872

            st.markdown(f"**Pre√ßo √† Vista Calculado:** R$ {preco_a_vista_calc:,.2f}")
            st.markdown(f"**Pre√ßo no Cart√£o Calculado:** R$ {preco_no_cartao_calc:,.2f}")

            with st.form("form_submit_manual"):
                adicionar_produto = st.form_submit_button("‚ûï Adicionar Produto (Manual)")
                if adicionar_produto:
                    if produto and quantidade > 0 and valor_pago >= 0:
                        imagem_bytes = None
                        url_salvar = ""

                        # Prioriza o arquivo uploaded, se existir
                        if imagem_file is not None:
                            imagem_bytes = imagem_file.read()
                            imagens_dict[produto] = imagem_bytes # Guarda para exibi√ß√£o na sess√£o
                        
                        # Se n√£o houver upload, usa a URL
                        elif imagem_url.strip():
                            url_salvar = imagem_url.strip()

                        # Se houver upload, a URL salva deve ser vazia, e vice-versa.
                        # O CSV ir√° persistir a Imagem_URL.

                        novo_produto_data = {
                            "Produto": [produto],
                            "Qtd": [quantidade],
                            "Custo Unit√°rio": [valor_pago],
                            "Custos Extras Produto": [custo_extra_produto],
                            "Margem (%)": [margem_manual],
                            "Imagem": [imagem_bytes],
                            "Imagem_URL": [url_salvar] # Salva a URL para persist√™ncia
                        }
                        novo_produto = pd.DataFrame(novo_produto_data)

                        # Adiciona ao produtos_manuais
                        st.session_state.produtos_manuais = pd.concat(
                            [st.session_state.produtos_manuais, novo_produto],
                            ignore_index=True
                        ).reset_index(drop=True)
                        
                        # Processa e atualiza o DataFrame geral
                        st.session_state.df_produtos_geral = processar_dataframe(
                            st.session_state.produtos_manuais,
                            frete_total,
                            custos_extras,
                            modo_margem,
                            margem_fixa
                        )
                        st.success("‚úÖ Produto adicionado!")
                        st.session_state["rerun_after_add"] = True 
                    else:
                        st.warning("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios.")

            st.markdown("---")
            st.subheader("Produtos adicionados manualmente (com bot√£o de Excluir individual)")

            # Exibir produtos com bot√£o de exclus√£o
            produtos_manuais_lista = st.session_state.produtos_manuais

            if produtos_manuais_lista.empty:
                st.info("‚ö†Ô∏è Nenhum produto cadastrado manualmente.")
            else:
                if "produto_para_excluir" not in st.session_state:
                    st.session_state["produto_para_excluir"] = None
                
                # Exibir produtos individualmente com a op√ß√£o de exclus√£o
                for i, row in produtos_manuais_lista.iterrows():
                    cols = st.columns([4, 1])
                    with cols[0]:
                        custo_unit_val = row.get('Custo Unit√°rio', 0.0)
                        st.write(f"**{row['Produto']}** ‚Äî Quantidade: {row['Qtd']} ‚Äî Custo Unit√°rio Base: R$ {custo_unit_val:.2f}")
                    with cols[1]:
                        if st.button(f"‚ùå Excluir", key=f"excluir_{i}"):
                            st.session_state["produto_para_excluir"] = i
                            break 

                # Processamento da Exclus√£o
                if st.session_state["produto_para_excluir"] is not None:
                    i = st.session_state["produto_para_excluir"]
                    produto_nome_excluido = produtos_manuais_lista.loc[i, "Produto"]
                    
                    # 1. Remove do DataFrame manual
                    st.session_state.produtos_manuais = produtos_manuais_lista.drop(i).reset_index(drop=True)
                    
                    # 2. Recalcula e atualiza o DataFrame geral
                    st.session_state.df_produtos_geral = processar_dataframe(
                        st.session_state.produtos_manuais,
                        frete_total,
                        custos_extras,
                        modo_margem,
                        margem_fixa
                    )
                    
                    # 3. Limpa o estado e for√ßa o rerun
                    st.session_state["produto_para_excluir"] = None
                    st.success(f"‚úÖ Produto '{produto_nome_excluido}' removido da lista manual.")
                    st.rerun()

            if "df_produtos_geral" in st.session_state and not st.session_state.df_produtos_geral.empty:
                exibir_resultados(st.session_state.df_produtos_geral, imagens_dict)
            else:
                st.info("‚ö†Ô∏è Nenhum produto processado para exibir.")

    # === Tab GitHub ===
    with tab_github:
        st.markdown("---")
        st.header("üì• Carregar CSV de Precifica√ß√£o do GitHub")
        if st.button("üîÑ Carregar CSV do GitHub (Geral)"):
            df_exemplo = load_csv_github(ARQ_CAIXAS)
            if not df_exemplo.empty:
                df_exemplo["Custos Extras Produto"] = 0.0
                df_exemplo["Imagem"] = None
                
                # Garante a nova coluna ao carregar
                if "Imagem_URL" not in df_exemplo.columns:
                    df_exemplo["Imagem_URL"] = ""

                st.session_state.produtos_manuais = df_exemplo.copy()
                st.session_state.df_produtos_geral = processar_dataframe(
                    df_exemplo, frete_total, custos_extras, modo_margem, margem_fixa
                )
                st.success("‚úÖ CSV carregado e processado com sucesso!")
                exibir_resultados(st.session_state.df_produtos_geral, imagens_dict)
                st.rerun()


# ==============================================================================
# FUN√á√ÉO DA P√ÅGINA: PAPELARIA
# ==============================================================================

def papelaria_aba():
    st.title("üìö Gerenciador Papelaria Personalizada (M√≥dulo de Insumos)")
    
    # Vari√°veis de Configura√ß√£o
    global GITHUB_TOKEN, GITHUB_REPO, GITHUB_BRANCH, OWNER, REPO_NAME, BRANCH
    URL_BASE = f"https://raw.githubusercontent.com/{OWNER}/{REPO_NAME}/{BRANCH}/"
    INSUMOS_CSV_URL = URL_BASE + "insumos_papelaria.csv"
    PRODUTOS_CSV_URL = URL_BASE + "produtos_papelaria.csv"
    CAMPOS_CSV_URL = URL_BASE + "categorias_papelaria.csv"

    # Estado da sess√£o
    if "insumos" not in st.session_state:
        st.session_state.insumos = load_csv_github(INSUMOS_CSV_URL)

    if "produtos_papelaria" not in st.session_state:
        st.session_state.produtos_papelaria = load_csv_github(PRODUTOS_CSV_URL)

    if "campos" not in st.session_state:
        st.session_state.campos = load_csv_github(CAMPOS_CSV_URL)
        
    # Inicializa√ß√µes de estado para garantir DFs n√£o nulos
    if "campos" not in st.session_state or st.session_state.campos is None or st.session_state.campos.empty:
        st.session_state.campos = pd.DataFrame(columns=["Campo", "Aplica√ß√£o", "Tipo", "Op√ß√µes"])

    if "insumos" not in st.session_state or st.session_state.insumos is None or st.session_state.insumos.empty:
        st.session_state.insumos = pd.DataFrame(columns=INSUMOS_BASE_COLS_GLOBAL)

    if "produtos_papelaria" not in st.session_state or st.session_state.produtos_papelaria is None or st.session_state.produtos_papelaria.empty:
        st.session_state.produtos_papelaria = pd.DataFrame(columns=["Produto", "Custo Total", "Pre√ßo √† Vista", "Pre√ßo no Cart√£o", "Margem (%)", "Insumos Usados"])
    
    # Garante colunas base
    for col in INSUMOS_BASE_COLS_GLOBAL:
        if col not in st.session_state.insumos.columns:
            st.session_state.insumos[col] = "" if col != "Pre√ßo Unit√°rio (R$)" else 0.0

    cols_base_prod = ["Produto"] + [c for c in PRODUTOS_BASE_COLS_GLOBAL if c != "Produto"]
    for col in cols_base_prod:
        if col not in st.session_state.produtos_papelaria.columns:
            st.session_state.produtos_papelaria[col] = "" if col not in ["Custo Total", "Pre√ßo √† Vista", "Pre√ßo no Cart√£o", "Margem (%)"] else 0.0
            
    if "Insumos Usados" not in st.session_state.produtos_papelaria.columns:
        st.session_state.produtos_papelaria["Insumos Usados"] = "[]"


    # Garante colunas extras e tipos
    st.session_state.insumos = garantir_colunas_extras(st.session_state.insumos, "Insumos")
    st.session_state.produtos_papelaria = garantir_colunas_extras(st.session_state.produtos_papelaria, "Produtos")

    # Verifica se houve altera√ß√£o nos produtos para salvar automaticamente
    if "hash_produtos_papelaria" not in st.session_state:
        st.session_state.hash_produtos_papelaria = hash_df(st.session_state.produtos_papelaria)

    novo_hash = hash_df(st.session_state.produtos_papelaria)
    if novo_hash != st.session_state.hash_produtos_papelaria:
        if novo_hash != "error": # Evita salvar se a fun√ß√£o hash falhou
            salvar_csv_no_github(
                GITHUB_TOKEN,
                GITHUB_REPO,
                "produtos_papelaria.csv",
                st.session_state.produtos_papelaria,
                GITHUB_BRANCH,
                mensagem="‚ôªÔ∏è Altera√ß√£o autom√°tica nos produtos de papelaria"
            )
            st.session_state.hash_produtos_papelaria = novo_hash

    # Cria√ß√£o das abas
    aba_campos, aba_insumos, aba_produtos = st.tabs(["Campos (Colunas)", "Insumos", "Produtos"])

    # =====================================
    # Aba Campos (gerencia colunas extras)
    # =====================================
    with aba_campos:
        st.header("Campos / Colunas Personalizadas")

        with st.form("form_add_campo"):
            st.subheader("Adicionar novo campo")
            nome_campo = st.text_input("Nome do Campo (ser√° o nome da coluna)", key="novo_campo_nome")
            aplicacao = st.selectbox("Aplica√ß√£o", ["Insumos", "Produtos", "Ambos"], key="novo_campo_aplicacao")
            tipo = st.selectbox("Tipo", ["Texto", "N√∫mero", "Sele√ß√£o"], key="novo_campo_tipo")
            opcoes = st.text_input("Op√ß√µes (se 'Sele√ß√£o', separe por v√≠rgula)", key="novo_campo_opcoes")
            adicionar = st.form_submit_button("Adicionar Campo")

            if adicionar:
                if not nome_campo.strip():
                    st.warning("Informe um nome de campo v√°lido.")
                else:
                    ja_existe = (
                        (st.session_state.campos["Campo"].astype(str).str.lower() == nome_campo.strip().lower())
                        & (st.session_state.campos["Aplica√ß√£o"] == aplicacao)
                    ).any()
                    if ja_existe:
                        st.warning("J√° existe um campo com esse nome para essa aplica√ß√£o.")
                    else:
                        nova_linha = {
                            "Campo": nome_campo.strip(),
                            "Aplica√ß√£o": aplicacao,
                            "Tipo": tipo,
                            "Op√ß√µes": opcoes
                        }
                        st.session_state.campos = pd.concat(
                            [st.session_state.campos, pd.DataFrame([nova_linha])],
                            ignore_index=True
                        ).reset_index(drop=True)
                        st.success(f"Campo '{nome_campo}' adicionado para {aplicacao}!")
                        
                        st.session_state.insumos = garantir_colunas_extras(st.session_state.insumos, "Insumos")
                        st.session_state.produtos_papelaria = garantir_colunas_extras(st.session_state.produtos_papelaria, "Produtos")
                        
                        st.rerun()

        st.markdown("### Campos cadastrados")
        if st.session_state.campos.empty:
            st.info("Nenhum campo extra cadastrado ainda.")
        else:
            st.dataframe(st.session_state.campos, use_container_width=True)

        if not st.session_state.campos.empty:
            st.divider()
            st.subheader("Editar ou Excluir campo")
            rotulos = [
                f"{row.Campo} ¬∑ ({row.Aplica√ß√£o})"
                for _, row in st.session_state.campos.iterrows()
            ]
            escolha = st.selectbox("Escolha um campo", [""] + rotulos, key="campo_escolhido_edit_del")
            
            if escolha:
                idx_list = st.session_state.campos.index[st.session_state.campos.apply(lambda row: f"{row.Campo} ¬∑ ({row.Aplica√ß√£o})" == escolha, axis=1)].tolist()
                idx = idx_list[0] if idx_list else None
                
                if idx is not None:
                    campo_atual = st.session_state.campos.loc[idx]
                    
                    acao_campo = st.radio(
                        "A√ß√£o",
                        ["Nenhuma", "Editar", "Excluir"],
                        horizontal=True,
                        key=f"acao_campo_{idx}"
                    )
                    
                    if acao_campo == "Excluir":
                        if st.button("Confirmar Exclus√£o", key=f"excluir_campo_{idx}"):
                            nome = campo_atual["Campo"]
                            aplic = campo_atual["Aplica√ß√£o"]
                            
                            st.session_state.campos = st.session_state.campos.drop(index=idx).reset_index(drop=True)
                            
                            if aplic in ("Insumos", "Ambos") and nome in st.session_state.insumos.columns:
                                st.session_state.insumos = st.session_state.insumos.drop(columns=[nome], errors='ignore')
                            if aplic in ("Produtos", "Ambos") and nome in st.session_state.produtos_papelaria.columns:
                                st.session_state.produtos_papelaria = st.session_state.produtos_papelaria.drop(columns=[nome], errors='ignore')
                                
                            st.success(f"Campo '{nome}' removido de {aplic}!")
                            st.rerun()
                            
                    if acao_campo == "Editar":
                        with st.form(f"form_edit_campo_{idx}"):
                            novo_nome = st.text_input("Nome do Campo", value=str(campo_atual["Campo"]), key=f"edit_nome_{idx}")
                            
                            aplic_opts = ["Insumos", "Produtos", "Ambos"]
                            aplic_idx = aplic_opts.index(campo_atual["Aplica√ß√£o"])
                            nova_aplic = st.selectbox("Aplica√ß√£o", aplic_opts, index=aplic_idx, key=f"edit_aplic_{idx}")
                            
                            tipo_opts = ["Texto", "N√∫mero", "Sele√ß√£o"]
                            tipo_idx = tipo_opts.index(campo_atual["Tipo"])
                            novo_tipo = st.selectbox("Tipo", tipo_opts, index=tipo_idx, key=f"edit_tipo_{idx}")
                            
                            novas_opcoes = st.text_input("Op√ß√µes (se 'Sele√ß√£o')", value=str(campo_atual["Op√ß√µes"]) if pd.notna(campo_atual["Op√ß√µes"]) else "", key=f"edit_opcoes_{idx}")
                            
                            salvar = st.form_submit_button("Salvar Altera√ß√µes")
                            
                            if salvar:
                                nome_antigo = campo_atual["Campo"]
                                aplic_antiga = campo_atual["Aplica√ß√£o"]
                                
                                st.session_state.campos.loc[idx, ["Campo","Aplica√ß√£o","Tipo","Op√ß√µes"]] = [
                                    novo_nome, nova_aplic, novo_tipo, novas_opcoes
                                ]
                                
                                renomeou = (str(novo_nome).strip() != str(nome_antigo).strip())
                                
                                if renomeou:
                                    if aplic_antiga in ("Insumos", "Ambos") and nome_antigo in st.session_state.insumos.columns:
                                        st.session_state.insumos = st.session_state.insumos.rename(columns={nome_antigo: novo_nome})
                                    if aplic_antiga in ("Produtos", "Ambos") and nome_antigo in st.session_state.produtos_papelaria.columns:
                                        st.session_state.produtos_papelaria = st.session_state.produtos_papelaria.rename(columns={nome_antigo: novo_nome})
                                        
                                st.session_state.insumos = garantir_colunas_extras(st.session_state.insumos, "Insumos")
                                st.session_state.produtos_papelaria = garantir_colunas_extras(st.session_state.produtos_papelaria, "Produtos")

                                st.success("Campo atualizado!")
                                st.rerun()
                            
        if not st.session_state.produtos_papelaria.empty:
            st.markdown("### üì• Exporta√ß√£o (aba Campos)")
            baixar_csv_aba(st.session_state.produtos_papelaria, "produtos_papelaria.csv", key_suffix="campos_papelaria")


    # =====================================
    # Aba Insumos
    # =====================================
    with aba_insumos:
        st.header("Insumos")

        st.session_state.insumos = garantir_colunas_extras(st.session_state.insumos, "Insumos")

        with st.form("form_add_insumo"):
            st.subheader("Adicionar novo insumo")
            nome_insumo = st.text_input("Nome do Insumo", key="novo_insumo_nome")
            categoria_insumo = st.text_input("Categoria", key="novo_insumo_categoria")
            unidade_insumo = st.text_input("Unidade de Medida (ex: un, kg, m)", key="novo_insumo_unidade")
            preco_insumo = st.number_input("Pre√ßo Unit√°rio (R$)", min_value=0.0, format="%.2f", key="novo_insumo_preco")

            extras_insumos = col_defs_para("Insumos")
            valores_extras = {}
            if not extras_insumos.empty:
                st.markdown("**Campos extras**")
                for i, row in extras_insumos.reset_index(drop=True).iterrows():
                    key = f"novo_insumo_extra_{row['Campo']}"
                    valores_extras[row["Campo"]] = render_input_por_tipo(
                        label=row["Campo"],
                        tipo=row["Tipo"],
                        opcoes=row["Op√ß√µes"],
                        valor_padrao=None,
                        key=key
                    )

            adicionou = st.form_submit_button("Adicionar Insumo")
            if adicionou:
                if not nome_insumo.strip():
                    st.warning("Informe o Nome do Insumo.")
                else:
                    novo = {
                        "Nome": nome_insumo.strip(),
                        "Categoria": categoria_insumo.strip(),
                        "Unidade": unidade_insumo.strip(),
                        "Pre√ßo Unit√°rio (R$)": float(preco_insumo),
                    }
                    for k, v in valores_extras.items():
                        novo[k] = v
                        
                    st.session_state.insumos = garantir_colunas_extras(st.session_state.insumos, "Insumos")
                    
                    st.session_state.insumos = pd.concat([st.session_state.insumos, pd.DataFrame([novo])], ignore_index=True).reset_index(drop=True)
                    st.success(f"Insumo '{nome_insumo}' adicionado!")
                    st.rerun()

        st.markdown("### Insumos cadastrados")
        ordem_cols = INSUMOS_BASE_COLS_GLOBAL + [c for c in st.session_state.insumos.columns if c not in INSUMOS_BASE_COLS_GLOBAL]
        st.dataframe(st.session_state.insumos.reindex(columns=ordem_cols), use_container_width=True)

        if not st.session_state.insumos.empty:
            insumo_selecionado = st.selectbox(
                "Selecione um insumo",
                [""] + st.session_state.insumos["Nome"].astype(str).fillna("").tolist(),
                key="insumo_escolhido_edit_del"
            )
        else:
            insumo_selecionado = None

        if insumo_selecionado:
            acao_insumo = st.radio(
                f"A√ß√£o para '{insumo_selecionado}'",
                ["Nenhuma", "Editar", "Excluir"],
                horizontal=True,
                key=f"acao_insumo_{insumo_selecionado}"
            )

            idxs = st.session_state.insumos.index[st.session_state.insumos["Nome"] == insumo_selecionado].tolist()
            idx = idxs[0] if idxs else None

            if acao_insumo == "Excluir" and idx is not None:
                if st.button("Confirmar Exclus√£o", key=f"excluir_insumo_{idx}"):
                    st.session_state.insumos = st.session_state.insumos.drop(index=idx).reset_index(drop=True)
                    st.success(f"Insumo '{insumo_selecionado}' removido!")
                    st.rerun()

            if acao_insumo == "Editar" and idx is not None:
                atual = st.session_state.insumos.loc[idx].fillna("")
                with st.form(f"form_edit_insumo_{idx}"):
                    novo_nome = st.text_input("Nome do Insumo", value=str(atual.get("Nome","")), key=f"edit_insumo_nome_{idx}")
                    nova_categoria = st.text_input("Categoria", value=str(atual.get("Categoria","")), key=f"edit_insumo_categoria_{idx}")
                    nova_unidade = st.text_input("Unidade de Medida (ex: un, kg, m)", value=str(atual.get("Unidade","")), key=f"edit_insumo_unidade_{idx}")
                    novo_preco = st.number_input(
                        "Pre√ßo Unit√°rio (R$)", min_value=0.0, format="%.2f",
                        value=float(atual.get("Pre√ßo Unit√°rio (R$)", 0.0)),
                        key=f"edit_insumo_preco_{idx}"
                    )

                    valores_extras_edit = {}
                    extras_insumos = col_defs_para("Insumos")
                    if not extras_insumos.empty:
                        st.markdown("**Campos extras**")
                        for i, row in extras_insumos.reset_index(drop=True).iterrows():
                            campo = row["Campo"]
                            key = f"edit_insumo_extra_{idx}_{campo}"
                            valores_extras_edit[campo] = render_input_por_tipo(
                                label=campo,
                                tipo=row["Tipo"],
                                opcoes=row["Op√ß√µes"],
                                valor_padrao=atual.get(campo, ""),
                                key=key
                            )

                    salvou = st.form_submit_button("Salvar Altera√ß√µes", key=f"salvar_insumo_{idx}")
                    if salvou:
                        st.session_state.insumos.loc[idx, "Nome"] = novo_nome
                        st.session_state.insumos.loc[idx, "Categoria"] = nova_categoria
                        st.session_state.insumos.loc[idx, "Unidade"] = nova_unidade
                        st.session_state.insumos.loc[idx, "Pre√ßo Unit√°rio (R$)"] = float(novo_preco)
                        for k, v in valores_extras_edit.items():
                            st.session_state.insumos.loc[idx, k] = v
                        st.success("Insumo atualizado!")
                        st.rerun()


    # =====================================
    # Aba Produtos
    # =====================================
    with aba_produtos:
        st.header("Produtos")

        with st.form("form_add_produto"):
            st.subheader("Adicionar novo produto")
            nome_produto = st.text_input("Nome do Produto", key="novo_produto_nome")

            if 'Nome' in st.session_state.insumos.columns:
                insumos_disponiveis = st.session_state.insumos["Nome"].dropna().unique().tolist()
            else:
                insumos_disponiveis = []

            insumos_selecionados = st.multiselect("Selecione os insumos usados", insumos_disponiveis, key="novo_produto_insumos_selecionados")

            insumos_usados = []
            custo_total = 0.0

            for insumo in insumos_selecionados:
                dados_insumo = st.session_state.insumos.loc[st.session_state.insumos["Nome"] == insumo].iloc[0]
                preco_unit = float(dados_insumo.get("Pre√ßo Unit√°rio (R$)", 0.0))
                unidade = str(dados_insumo.get("Unidade", ""))

                qtd_usada = st.number_input(
                    f"Quantidade usada de {insumo} ({unidade}) - Pre√ßo unit√°rio R$ {preco_unit:.2f}",
                    min_value=0.0,
                    step=0.01,
                    key=f"novo_qtd_{insumo}"
                )

                custo_insumo = qtd_usada * preco_unit
                custo_total += custo_insumo

                insumos_usados.append({
                    "Insumo": insumo,
                    "Quantidade Usada": qtd_usada,
                    "Unidade": unidade,
                    "Pre√ßo Unit√°rio (R$)": preco_unit,
                    "Custo": custo_insumo
                })

            st.markdown(f"**Custo Total Calculado (Insumos): R$ {custo_total:,.2f}**")

            margem = st.number_input("Margem de Lucro (%)", min_value=0.0, format="%.2f", value=30.0, key="novo_produto_margem")

            preco_vista = custo_total * (1 + margem / 100) if custo_total > 0 else 0.0
            preco_cartao = preco_vista / 0.8872 if preco_vista > 0 else 0.0

            st.markdown(f"üí∏ **Pre√ßo √† Vista Calculado:** R$ {preco_vista:,.2f}")
            st.markdown(f"üí≥ **Pre√ßo no Cart√£o Calculado:** R$ {preco_cartao:,.2f}")

            extras_produtos = col_defs_para("Produtos")
            valores_extras_prod = {}
            if not extras_produtos.empty:
                st.markdown("**Campos extras**")
                for i, row in extras_produtos.reset_index(drop=True).iterrows():
                    key = f"novo_produto_extra_{row['Campo']}"
                    valores_extras_prod[row["Campo"]] = render_input_por_tipo(
                        label=row["Campo"],
                        tipo=row["Tipo"],
                        opcoes=row["Op√ß√µes"],
                        valor_padrao=None,
                        key=key
                    )

            adicionou_prod = st.form_submit_button("Adicionar Produto")
            if adicionou_prod:
                if not nome_produto.strip():
                    st.warning("Informe o Nome do Produto.")
                elif not insumos_usados:
                    st.warning("Selecione ao menos um insumo para o produto.")
                else:
                    novo = {
                        "Produto": nome_produto.strip(),
                        "Custo Total": float(custo_total),
                        "Pre√ßo √† Vista": float(preco_vista),
                        "Pre√ßo no Cart√£o": float(preco_cartao),
                        "Margem (%)": float(margem),
                        "Insumos Usados": str(insumos_usados)
                    }
                    for k, v in valores_extras_prod.items():
                        novo[k] = v

                    # Envio da mensagem para o Telegram (mantido)
                    try:
                        TELEGRAM_TOKEN_SECRET = st.secrets.get("telegram_token", HARDCODED_TELEGRAM_TOKEN)
                        TELEGRAM_CHAT_ID_PROD = TELEGRAM_CHAT_ID
                        THREAD_ID_PROD = 43

                        mensagem = f"<b>üì¶ Novo Produto Cadastrado:</b>\n"
                        mensagem += f"<b>Produto:</b> {nome_produto}\n"
                        mensagem += "<b>Insumos:</b>\n"

                        for insumo in insumos_usados:
                            nome = insumo['Insumo']
                            qtd = insumo['Quantidade Usada']
                            un = insumo['Unidade']
                            custo = insumo['Custo']
                            mensagem += f"‚Ä¢ {nome} - {qtd} {un} (R$ {custo:.2f})\n"

                        mensagem += f"\n<b>Custo Total:</b> R$ {custo_total:,.2f}"
                        mensagem += f"\n<b>Pre√ßo √† Vista:</b> R$ {preco_vista:,.2f}"
                        mensagem += f"\n<b>Pre√ßo no Cart√£o:</b> R$ {preco_cartao:,.2f}"

                        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN_SECRET}/sendMessage"
                        payload = {
                            "chat_id": TELEGRAM_CHAT_ID_PROD,
                            "message_thread_id": THREAD_ID_PROD,
                            "text": mensagem,
                            "parse_mode": "HTML"
                        }

                        response = requests.post(telegram_url, json=payload)
                        if response.status_code != 200:
                            st.warning(f"‚ö†Ô∏è Erro ao enviar para Telegram: {response.text}")
                        else:
                             st.success("‚úÖ Mensagem enviada para o Telegram!")

                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Falha ao tentar enviar para o Telegram: {e}")

                    # Salva no DataFrame local
                    st.session_state.produtos_papelaria = garantir_colunas_extras(st.session_state.produtos_papelaria, "Produtos")
                    
                    st.session_state.produtos_papelaria = pd.concat(
                        [st.session_state.produtos_papelaria, pd.DataFrame([novo])],
                        ignore_index=True
                    ).reset_index(drop=True)
                    st.success(f"Produto '{nome_produto}' adicionado!")
                    st.rerun()

        st.markdown("### Produtos cadastrados")
        ordem_cols_p = PRODUTOS_BASE_COLS_GLOBAL + ["Insumos Usados"] + [c for c in st.session_state.produtos_papelaria.columns if c not in PRODUTOS_BASE_COLS_GLOBAL + ["Insumos Usados"]]
        st.dataframe(st.session_state.produtos_papelaria.reindex(columns=ordem_cols_p), use_container_width=True)

        if not st.session_state.produtos_papelaria.empty:
            produto_selecionado = st.selectbox(
                "Selecione um produto",
                [""] + st.session_state.produtos_papelaria["Produto"].astype(str).fillna("").tolist(),
                key="produto_escolhido_edit_del"
            )
        else:
            produto_selecionado = None

        if produto_selecionado:
            acao_produto = st.radio(
                f"A√ß√£o para '{produto_selecionado}'",
                ["Nenhuma", "Editar", "Excluir"],
                horizontal=True,
                key=f"acao_produto_{produto_selecionado}"
            )

            idxs_p = st.session_state.produtos_papelaria.index[st.session_state.produtos_papelaria["Produto"] == produto_selecionado].tolist()
            idx_p = idxs_p[0] if idxs_p else None

            if acao_produto == "Excluir" and idx_p is not None:
                if st.button("Confirmar Exclus√£o", key=f"excluir_produto_{idx_p}"):
                    st.session_state.produtos_papelaria = st.session_state.produtos_papelaria.drop(index=idx_p).reset_index(drop=True)
                    st.success(f"Produto '{produto_selecionado}' removido!")
                    st.rerun()

            if acao_produto == "Editar" and idx_p is not None:
                atual_p = st.session_state.produtos_papelaria.loc[idx_p].fillna("")
                with st.form(f"form_edit_produto_{idx_p}"):
                    novo_nome = st.text_input("Nome do Produto", value=str(atual_p.get("Produto","")), key=f"edit_produto_nome_{idx_p}")
                    nova_margem = st.number_input("Margem (%)", min_value=0.0, format="%.2f", value=float(atual_p.get("Margem (%)", 0.0)), key=f"edit_produto_margem_{idx_p}")

                    try:
                        insumos_atual = ast.literal_eval(atual_p.get("Insumos Usados", "[]"))
                        if not isinstance(insumos_atual, list):
                            insumos_atual = []
                    except Exception:
                        insumos_atual = []

                    insumos_disponiveis = st.session_state.insumos["Nome"].dropna().unique().tolist()
                    nomes_pre_selecionados = [i["Insumo"] for i in insumos_atual]
                    insumos_editados = st.multiselect("Selecione os insumos usados", insumos_disponiveis, default=nomes_pre_selecionados, key=f"edit_produto_insumos_selecionados_{idx_p}")

                    insumos_usados_edit = []
                    novo_custo = 0.0

                    for insumo in insumos_editados:
                        dados_insumo = st.session_state.insumos.loc[st.session_state.insumos["Nome"] == insumo].iloc[0]
                        preco_unit = float(dados_insumo.get("Pre√ßo Unit√°rio (R$)", 0.0))
                        unidade = str(dados_insumo.get("Unidade", ""))

                        qtd_default = 0.0
                        for item in insumos_atual:
                            if item.get("Insumo") == insumo:
                                qtd_default = float(item.get("Quantidade Usada", 0.0))

                        qtd_usada = st.number_input(
                            f"Quantidade usada de {insumo} ({unidade}) - Pre√ßo unit√°rio R$ {preco_unit:.2f}",
                            min_value=0.0,
                            step=0.01,
                            value=qtd_default,
                            key=f"edit_qtd_{idx_p}_{insumo}"
                        )

                        custo_insumo = qtd_usada * preco_unit
                        novo_custo += custo_insumo

                        insumos_usados_edit.append({
                            "Insumo": insumo,
                            "Quantidade Usada": qtd_usada,
                            "Unidade": unidade,
                            "Pre√ßo Unit√°rio (R$)": preco_unit,
                            "Custo": custo_insumo
                        })

                    novo_vista = novo_custo * (1 + nova_margem / 100)
                    novo_cartao = novo_vista / 0.8872

                    st.markdown(f"**Novo custo calculado: R$ {novo_custo:,.2f}**")
                    st.markdown(f"üí∏ **Pre√ßo √† Vista Recalculado:** R$ {novo_vista:,.2f}")
                    st.markdown(f"üí≥ **Pre√ßo no Cart√£o Recalculado:** R$ {novo_cartao:,.2f}")

                    valores_extras_edit_p = {}
                    extras_produtos = col_defs_para("Produtos")
                    if not extras_produtos.empty:
                        st.markdown("**Campos extras**")
                        for i, row in extras_produtos.reset_index(drop=True).iterrows():
                            campo = row["Campo"]
                            key = f"edit_produto_extra_{idx_p}_{campo}"
                            valores_extras_edit_p[campo] = render_input_por_tipo(
                                label=campo,
                                tipo=row["Tipo"],
                                opcoes=row["Op√ß√µes"],
                                valor_padrao=atual_p.get(campo, ""),
                                key=key
                            )

                    salvou_p = st.form_submit_button("Salvar Altera√ß√µes", key=f"salvar_produto_{idx_p}")
                    if salvou_p:
                        st.session_state.produtos_papelaria.loc[idx_p, "Produto"] = novo_nome
                        st.session_state.produtos_papelaria.loc[idx_p, "Custo Total"] = float(novo_custo)
                        st.session_state.produtos_papelaria.loc[idx_p, "Pre√ßo √† Vista"] = float(novo_vista)
                        st.session_state.produtos_papelaria.loc[idx_p, "Pre√ßo no Cart√£o"] = float(novo_cartao)
                        # LINHA CORRIGIDA ABAIXO
                        st.session_state.produtos_papelaria.loc[idx_p, "Margem (%)"] = float(nova_margem)
                        st.session_state.produtos_papelaria.loc[idx_p, "Insumos Usados"] = str(insumos_usados_edit)
                        for k, v in valores_extras_edit_p.items():
                            st.session_state.produtos_papelaria.loc[idx_p, k] = v
                        st.success("Produto atualizado!")
                        st.rerun()

        # bot√£o de exporta√ß√£o CSV fora dos forms
        if not st.session_state.produtos_papelaria.empty:
            baixar_csv_aba(st.session_state.produtos_papelaria, "produtos_papelaria.csv", key_suffix="produtos_papelaria")
            
# FIM DA FUN√á√ÉO papelaria_aba()


def precificacao_geral():
    """Roteador para as duas abas do precificador."""
    st.header("‚öôÔ∏è M√≥dulo de Precifica√ß√£o")
    
    # Roteamento interno na sidebar
    pagina_precificacao = st.sidebar.radio(
        "Selecione o M√≥dulo de Precifica√ß√£o:",
        ["Precifica√ß√£o Geral", "Papelaria Personalizada"],
        key='prec_page_select_widget'
    )
    
    if pagina_precificacao == "Precifica√ß√£o Geral":
        precificacao_completa()
    elif pagina_precificacao == "Papelaria Personalizada":
        papelaria_aba()

# --- FIM P√ÅGINAS DO NOVO M√ìDULO ---


# ==============================================================================
# P√ÅGINAS DO M√ìDULO GEST√ÉO FINANCEIRA
# ==============================================================================

def homepage():
    # --- 1. Carrega dados e calcula m√©tricas ---
    produtos_df = inicializar_produtos()
    df_movimentacoes = carregar_livro_caixa()
    
    # Produtos novos (√∫ltimos N cadastrados com estoque > 0)
    produtos_novos = produtos_df[produtos_df['Quantidade'] > 0].sort_values(by='ID', ascending=False).head(10) 
    
    # Produtos mais vendidos (Top N)
    df_mais_vendidos_id = get_most_sold_products(df_movimentacoes)
    top_ids_vendidos = df_mais_vendidos_id["Produto_ID"].head(10).tolist() if not df_mais_vendidos_id.empty else []
    if top_ids_vendidos:
        temp = produtos_df[produtos_df["ID"].isin(top_ids_vendidos)].copy()
        present_ids = [pid for pid in top_ids_vendidos if pid in temp["ID"].astype(str).values]
        if present_ids:
            produtos_mais_vendidos = temp.set_index("ID").loc[present_ids].reset_index()
        else:
            produtos_mais_vendidos = pd.DataFrame(columns=produtos_df.columns)
    else:
        produtos_mais_vendidos = pd.DataFrame(columns=produtos_df.columns)
    
    # Produtos em Oferta: PrecoCartao < PrecoVista (PrecoVista)
    produtos_oferta = produtos_df.copy()
    produtos_oferta['PrecoVista_f'] = pd.to_numeric(produtos_oferta['PrecoVista'], errors='coerce').fillna(0)
    produtos_oferta['PrecoCartao_f'] = pd.to_numeric(produtos_oferta['PrecoCartao'], errors='coerce').fillna(0)
    produtos_oferta = produtos_oferta[
        (produtos_oferta['PrecoVista_f'] > 0) &
        (produtos_oferta['PrecoCartao_f'] < produtos_oferta['PrecoVista_f'])
    ].sort_values(by='Nome').head(10)

    
    # ==================================================
    # 3. SE√á√ÉO MAIS VENDIDOS (Carrossel)
    # ==================================================
    st.markdown(f'<img src="{URL_MAIS_VENDIDOS}" class="section-header-img" alt="Mais Vendidos">', unsafe_allow_html=True)
    
    if produtos_mais_vendidos.empty:
        st.info("N√£o h√° dados de vendas suficientes (Entradas Realizadas) para determinar os produtos mais vendidos.")
    else:
        html_cards = []
        for i, row in produtos_mais_vendidos.iterrows():
            vendas_count = df_mais_vendidos_id[df_mais_vendidos_id["Produto_ID"] == str(row["ID"])]["Quantidade Total Vendida"].iloc[0] if not df_mais_vendidos_id.empty and not df_mais_vendidos_id[df_mais_vendidos_id["Produto_ID"] == str(row["ID"])].empty else 0
            nome_produto = row['Nome']
            descricao = row['Marca'] if row['Marca'] else row['Categoria']
            preco_cartao = to_float(row.get('PrecoCartao', 0))
            foto_url = row.get("FotoURL") if row.get("FotoURL") else f"https://placehold.co/150x150/F48FB1/880E4F?text={str(row.get('Nome','')).replace(' ', '+')}"
            card_html = f'''
                <div class="product-card">
                    <img src="{foto_url}" alt="{nome_produto}">
                    <p style="font-size: 0.9em; height: 40px; white-space: normal;">{nome_produto} - {descricao}</p>
                    <p style="margin: 5px 0 15px;">
                        <span class="price-promo">R$ {preco_cartao:,.2f}</span>
                    </p>
                    <button onclick="window.alert('Compra simulada: {nome_produto}')" class="buy-button">COMPRAR</button>
                    <p style="font-size: 0.7em; color: #888; margin-top: 5px;">Vendas: {int(vendas_count)}</p>
                </div>
            '''
            html_cards.append(card_html)
        st.markdown(f'''
            <div class="carousel-outer-container">
                <div class="product-wrapper">
                    {"".join(html_cards)}
                </div>
            </div>
        ''', unsafe_allow_html=True)

    st.markdown("---")

    # ==================================================
    # 4. SE√á√ÉO NOSSAS OFERTAS (Carrossel)
    # ==================================================
    st.markdown('<div class="offer-section">', unsafe_allow_html=True)
    st.markdown(f'<img src="{URL_OFERTAS}" class="section-header-img" alt="Nossas Ofertas">', unsafe_allow_html=True)

    if produtos_oferta.empty:
        st.info("Nenhum produto em promo√ß√£o registrado no momento.")
    else:
        html_cards_ofertas = []
        for i, row in produtos_oferta.iterrows():
            nome_produto = row['Nome']
            descricao = row['Marca'] if row['Marca'] else row['Categoria']
            preco_vista_original = row['PrecoVista_f']
            preco_cartao_promo = row['PrecoCartao_f']
            desconto = 0.0
            try:
                desconto = 1 - (preco_cartao_promo / preco_vista_original) if preco_vista_original > 0 else 0
            except:
                desconto = 0.0
            desconto_percent = round(desconto * 100)
            foto_url = row.get("FotoURL") if row.get("FotoURL") else f"https://placehold.co/150x150/E91E63/FFFFFF?text={str(row.get('Nome','')).replace(' ', '+')}"
            card_html = f'''
                <div class="product-card" style="background-color: #FFF5F7;">
                    <img src="{foto_url}" alt="{nome_produto}">
                    <p style="font-size: 0.9em; height: 40px; white-space: normal;">{nome_produto} - {descricao}</p>
                    <p style="margin: 5px 0 0;">
                        <span class="price-original">R$ {preco_vista_original:,.2f}</span>
                        <span class="price-promo">R$ {preco_cartao_promo:,.2f}</span>
                    </p>
                    <p style="color: #E91E63; font-weight: bold; font-size: 0.8em; margin-top: 5px; margin-bottom: 10px;">{desconto_percent}% OFF</p>
                    <button onclick="window.alert('Compra simulada: {nome_produto}')" class="buy-button">COMPRAR</button>
                </div>
            '''
            html_cards_ofertas.append(card_html)
        st.markdown(f'''
            <div class="carousel-outer-container">
                <div class="product-wrapper">
                    {"".join(html_cards_ofertas)}
                </div>
            </div>
        ''', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)  # Fecha offer-section
    st.markdown("---")

    # ==================================================
    # 5. SE√á√ÉO NOSSAS NOVIDADES (Carrossel Autom√°tico)
    # ==================================================
    st.markdown(f'<h2>Nossas Novidades</h2>', unsafe_allow_html=True)

    # Seleciona os √∫ltimos 10 produtos cadastrados com estoque > 0
    produtos_novos = produtos_df[produtos_df['Quantidade'] > 0].sort_values(by='ID', ascending=False).head(10)

    if produtos_novos.empty:
        st.info("N√£o h√° produtos cadastrados no estoque para exibir como novidades.")
    else:
        html_cards_novidades = []
        for _, row in produtos_novos.iterrows():
            foto_url = row.get("FotoURL") if row.get("FotoURL") else f"https://placehold.co/400x400/FFC1E3/E91E63?text={row['Nome'].replace(' ', '+')}"
            preco_vista = to_float(row.get('PrecoVista', 0))
            preco_formatado = f"R$ {preco_vista:,.2f}" if preco_vista > 0 else "Pre√ßo n√£o dispon√≠vel"
            nome = row.get("Nome", "")
            marca = row.get("Marca", "")
            qtd = int(row.get("Quantidade", 0))

            card_html = f"""
            <div class="product-card">
                <p style="font-weight: bold; color: #E91E63; margin-bottom: 10px; font-size: 0.9em;">‚ú® Doce&Bella - Novidade</p>
                <img src="{foto_url}" alt="{nome}">
                <p style="font-weight: bold; margin-top: 10px; height: 30px; white-space: normal;">{nome} ({marca})</p>
                <p style="font-size: 0.9em;">‚ú® Estoque: {qtd}</p>
                <p style="font-weight: bold; color: #E91E63; margin-top: 5px;">üí∏ {preco_formatado}</p>
                
            </div>
            """
            html_cards_novidades.append(card_html)

        # Renderiza o carrossel
        st.markdown(f"""
            <div class="carousel-outer-container">
                <div class="product-wrapper">
                    {''.join(html_cards_novidades)}
               
            </div>
        """, unsafe_allow_html=True)


        
# ==============================================================================
# 2. P√ÅGINAS DE GEST√ÉO (LIVRO CAIXA, PRODUTOS, COMPRAS, PROMO√á√ïES)
# ==============================================================================

def gestao_promocoes():
    """P√°gina de gerenciamento de promo√ß√µes."""
    
    # Inicializa ou carrega o estado de produtos e promo√ß√µes
    produtos = inicializar_produtos()
    
    if "promocoes" not in st.session_state:
        st.session_state.promocoes = carregar_promocoes()
    
    promocoes_df = st.session_state.promocoes
    
    # Processa o DataFrame de promo√ß√µes (normaliza datas e filtra expiradas)
    promocoes = norm_promocoes(promocoes_df.copy())
    
    # Recarrega as vendas para a l√≥gica de produtos parados
    df_movimentacoes = carregar_livro_caixa()
    vendas = df_movimentacoes[df_movimentacoes["Tipo"] == "Entrada"].copy()
    
    # --- PRODUTOS COM VENDA (para an√°lise de inatividade) ---
    vendas_list = []
    for index, row in vendas.iterrows():
        produtos_json = row["Produtos Vendidos"]
        if pd.notna(produtos_json) and produtos_json:
            try:
                # Tenta usar json.loads, mas usa ast.literal_eval como fallback
                try:
                    items = json.loads(produtos_json)
                except (json.JSONDecodeError, TypeError):
                    items = ast.literal_eval(produtos_json)
                
                # CORRE√á√ÉO: Garante que 'items' √© uma lista e itera com seguran√ßa
                if isinstance(items, list):
                    for item in items:
                         produto_id = str(item.get("Produto_ID"))
                         if produto_id and produto_id != "None":
                            vendas_list.append({
                                "Data": parse_date_yyyy_mm_dd(row["Data"]), 
                                "IDProduto": produto_id
                            })
            except Exception:
                continue
            
    # CORRE√á√ÉO: Adiciona a verifica√ß√£o de lista vazia antes de criar o DataFrame e chamar dropna
    if vendas_list:
        vendas_flat = pd.DataFrame(vendas_list)
        # O dropna √© seguro aqui porque a lista n√£o est√° vazia e 'IDProduto' √© garantido no for loop.
        vendas_flat = vendas_flat.dropna(subset=["IDProduto"])
    else:
        # Retorna um DataFrame vazio, mas com a coluna esperada, para evitar KeyErrors
        vendas_flat = pd.DataFrame(columns=["Data", "IDProduto"])
    

    st.header("üè∑Ô∏è Promo√ß√µes")

    # --- CADASTRAR ---
    with st.expander("‚ûï Cadastrar promo√ß√£o", expanded=False):
        if produtos.empty:
            st.info("Cadastre produtos primeiro para criar promo√ß√µes.")
        else:
            # Lista de produtos eleg√≠veis (aqueles que n√£o s√£o varia√ß√µes, ou seja, PaiID √© nulo)
            opcoes_prod = (produtos["ID"].astype(str) + " - " + produtos["Nome"]).tolist()
            opcoes_prod.insert(0, "")
            
            sel_prod = st.selectbox("Produto", opcoes_prod, key="promo_cad_produto")
            
            if sel_prod:
                pid = sel_prod.split(" - ")[0].strip()
                pnome = sel_prod.split(" - ", 1)[1].strip()

                col1, col2, col3 = st.columns([1, 1, 1])
                with col1:
                    desconto_str = st.text_input("Desconto (%)", value="0", key="promo_cad_desc")
                with col2:
                    data_ini = st.date_input("In√≠cio", value=date.today(), key="promo_cad_inicio")
                with col3:
                    data_fim = st.date_input("T√©rmino", value=date.today() + timedelta(days=7), key="promo_cad_fim")

                if st.button("Adicionar promo√ß√£o", key="promo_btn_add"):
                    desconto = to_float(desconto_str)
                    if desconto < 0 or desconto > 100:
                        st.error("O desconto deve estar entre 0 e 100%.")
                    elif data_fim < data_ini:
                        st.error("A data de t√©rmino deve ser maior ou igual √† data de in√≠cio.")
                    else:
                        novo = {
                            "ID": prox_id(promocoes_df, "ID"),
                            "IDProduto": str(pid),
                            "NomeProduto": pnome,
                            "Desconto": float(desconto),
                            "DataInicio": str(data_ini),
                            "DataFim": str(data_fim),
                        }
                        st.session_state.promocoes = pd.concat([promocoes_df, pd.DataFrame([novo])], ignore_index=True)
                        # Placeholder para save_csv_github (deve ser ajustado conforme a implementa√ß√£o real de persist√™ncia de promo√ß√µes)
                        if True: # Simula√ß√£o de salvamento bem-sucedido
                            carregar_promocoes.clear()
                            st.success("Promo√ß√£o cadastrada!")
                            st.rerun()  # üîë atualiza√ß√£o imediata

    # --- PRODUTOS PARADOS E PERTO DA VALIDADE ---
    st.markdown("---")
    st.subheader("üí° Sugest√µes de Promo√ß√£o")
    
    # 1. Sugest√£o de Produtos Parados
    st.markdown("#### üì¶ Produtos parados sem vendas")
    
    dias_sem_venda = st.number_input(
        "Considerar parados ap√≥s quantos dias?",
        min_value=1, max_value=365, value=30, key="promo_dias_sem_venda"
    )

    if not vendas_flat.empty:
        # Garante que a coluna de data seja pd.Series de datetime para o max() funcionar
        vendas_flat["Data"] = pd.to_datetime(vendas_flat["Data"], errors="coerce")
        ultima_venda = vendas_flat.groupby("IDProduto")["Data"].max().reset_index()
        ultima_venda.columns = ["IDProduto", "UltimaVenda"]
    else:
        ultima_venda = pd.DataFrame(columns=["IDProduto", "UltimaVenda"])

    produtos_parados = produtos.merge(ultima_venda, left_on="ID", right_on="IDProduto", how="left")
    
    # CORRE√á√ÉO: Converte UltimaVenda para datetime para compara√ß√£o com Timestamp
    produtos_parados["UltimaVenda"] = pd.to_datetime(produtos_parados["UltimaVenda"], errors='coerce')
    
    # Cria o limite como Timestamp para compara√ß√£o segura
    limite_dt = datetime.combine(date.today() - timedelta(days=int(dias_sem_venda)), datetime.min.time())

    # Filtra produtos com estoque e que a √∫ltima venda foi antes do limite (ou nunca vendeu)
    produtos_parados_sugeridos = produtos_parados[
        (produtos_parados["Quantidade"] > 0) &
        # Compara a S√©rie de Timestamps (UltimaVenda) com o Timestamp do limite_dt
        (produtos_parados["UltimaVenda"].isna() | (produtos_parados["UltimaVenda"] < limite_dt))
    ].copy()
    
    # Prepara para exibi√ß√£o (converte de volta para date)
    produtos_parados_sugeridos['UltimaVenda'] = produtos_parados_sugeridos['UltimaVenda'].dt.date.fillna(pd.NaT) 

    if produtos_parados_sugeridos.empty:
        st.info("Nenhum produto parado encontrado com estoque e fora de promo√ß√£o.")
    else:
        st.dataframe(
            produtos_parados_sugeridos[["ID", "Nome", "Quantidade", "UltimaVenda"]].fillna({"UltimaVenda": "NUNCA VENDIDO"}), 
            use_container_width=True, hide_index=True
        )

        with st.expander("‚öôÔ∏è Criar Promo√ß√£o Autom√°tica para Parados"):
            desconto_auto = st.number_input(
                "Desconto sugerido (%)", min_value=1, max_value=100, value=20, key="promo_desc_auto"
            )
            dias_validade = st.number_input(
                "Dura√ß√£o da promo√ß√£o (dias)", min_value=1, max_value=90, value=7, key="promo_dias_validade_auto"
            )

            if st.button("üî• Criar promo√ß√£o autom√°tica", key="promo_btn_auto"):
                for _, row in produtos_parados_sugeridos.iterrows():
                    novo = {
                        "ID": prox_id(st.session_state.promocoes, "ID"),
                        "IDProduto": str(row["ID"]),
                        "NomeProduto": row["Nome"],
                        "Desconto": float(desconto_auto),
                        "DataInicio": str(date.today()),
                        "DataFim": str(date.today() + timedelta(days=int(dias_validade))),
                    }
                    st.session_state.promocoes = pd.concat([st.session_state.promocoes, pd.DataFrame([novo])], ignore_index=True)

                if True: # Simula√ß√£o de salvamento bem-sucedido
                    carregar_promocoes.clear()
                    st.success(f"Promo√ß√µes criadas para {len(produtos_parados_sugeridos)} produtos parados!")
                    st.rerun()  # üîë atualiza√ß√£o imediata

    st.markdown("---")
    
    # 2. Sugest√£o de Produtos Perto da Validade
    st.markdown("#### ‚è≥ Produtos Pr√≥ximos da Validade")
    
    dias_validade_limite = st.number_input(
        "Considerar perto da validade (dias restantes)",
        min_value=1, max_value=365, value=60, key="promo_dias_validade_restante"
    )
    
    limite_validade = date.today() + timedelta(days=int(dias_validade_limite))

    # CR√çTICO: Produtos Validade √© uma c√≥pia. Garante que a coluna Validade seja um objeto datetime para a compara√ß√£o.
    produtos_validade_sugeridos = produtos.copy()
    
    # Converte Validade de volta para datetime/Timestamp para compara√ß√£o segura (se j√° n√£o estiver assim)
    produtos_validade_sugeridos['Validade_dt'] = pd.to_datetime(produtos_validade_sugeridos['Validade'], errors='coerce')
    limite_validade_dt = datetime.combine(limite_validade, datetime.min.time()) # Timestamp do limite
    
    
    produtos_validade_sugeridos = produtos_validade_sugeridos[
        (produtos_validade_sugeridos["Quantidade"] > 0) &
        # Compara a S√©rie de Timestamps (Validade_dt) com o Timestamp do limite_validade_dt
        (produtos_validade_sugeridos["Validade_dt"].notna()) &
        (produtos_validade_sugeridos["Validade_dt"] <= limite_validade_dt)
    ].copy()
    
    if produtos_validade_sugeridos.empty:
        st.info("Nenhum produto com estoque e pr√≥ximo da validade encontrado.")
    else:
        # CORRE√á√ÉO AQUI: Garante que a coluna Validade seja um objeto date (como foi inicializada)
        # e que a subtra√ß√£o s√≥ ocorra se n√£o for nulo, usando um tratamento try/except mais robusto.
        def calcular_dias_restantes(x):
            if pd.notna(x) and isinstance(x, date):
                return (x - date.today()).days
            return float('inf')

        produtos_validade_sugeridos['Dias Restantes'] = produtos_validade_sugeridos['Validade'].apply(calcular_dias_restantes)
        
        st.dataframe(
            produtos_validade_sugeridos[["ID", "Nome", "Quantidade", "Validade", "Dias Restantes"]].sort_values("Dias Restantes"), 
            use_container_width=True, hide_index=True
        )

    st.markdown("---")
    
    # 2. Sugest√£o de Produtos Perto da Validade
    st.markdown("#### ‚è≥ Produtos Pr√≥ximos da Validade")
    
    dias_validade_limite = st.number_input(
        "Considerar perto da validade (dias restantes)",
        min_value=1, max_value=365, value=60, key="promo_dias_validade_restante_2"
    )
    
    limite_validade = date.today() + timedelta(days=int(dias_validade_limite))
    
    produtos_validade_sugeridos = produtos.copy()
    
    produtos_validade_sugeridos['Validade_dt'] = pd.to_datetime(produtos_validade_sugeridos['Validade'], errors='coerce')
    limite_validade_dt = datetime.combine(limite_validade, datetime.min.time())
    
    
    produtos_validade_sugeridos = produtos_validade_sugeridos[
        (produtos_validade_sugeridos["Quantidade"] > 0) &
        (produtos_validade_sugeridos["Validade_dt"].notna()) &
        (produtos_validade_sugeridos["Validade_dt"] <= limite_validade_dt)
    ].copy()
    
    if produtos_validade_sugeridos.empty:
        st.info("Nenhum produto com estoque e pr√≥ximo da validade encontrado.")
    else:
        # CORRE√á√ÉO AQUI: Garante que a coluna Validade seja um objeto date (como foi inicializada)
        def calcular_dias_restantes(x):
            if pd.notna(x) and isinstance(x, date):
                return (x - date.today()).days
            return float('inf')

        produtos_validade_sugeridos['Dias Restantes'] = produtos_validade_sugeridos['Validade'].apply(calcular_dias_restantes)
        
        st.dataframe(
            produtos_validade_sugeridos[["ID", "Nome", "Quantidade", "Validade", "Dias Restantes"]].sort_values("Dias Restantes"), 
            use_container_width=True, hide_index=True
        )

    st.markdown("---")
    
    # --- LISTA DE PROMO√á√ïES ATIVAS ---
    st.markdown("### üìã Lista de Promo√ß√µes Ativas")
    
    if promocoes.empty:
        st.info("Nenhuma promo√ß√£o ativa cadastrada.")
    else:
        df_display = promocoes.copy()
        
        # Formata as colunas para exibi√ß√£o
        df_display["Desconto"] = df_display["Desconto"].apply(lambda x: f"{x:.0f}%")
        df_display["DataInicio"] = df_display["DataInicio"].apply(lambda x: x.strftime('%d/%m/%Y'))
        df_display["DataFim"] = df_display["DataFim"].apply(lambda x: x.strftime('%d/%m/%Y'))
        
        st.dataframe(
            df_display[["ID", "NomeProduto", "Desconto", "DataInicio", "DataFim"]], 
            use_container_width=True,
            column_config={
                "DataInicio": "In√≠cio",
                "DataFim": "T√©rmino",
                "NomeProduto": "Produto"
            }
        )

        # --- EDITAR E EXCLUIR ---
        st.markdown("#### Opera√ß√µes de Edi√ß√£o e Exclus√£o")
        
        opcoes_promo_operacao = {
            f"ID {row['ID']} | {row['NomeProduto']} | {row['Desconto']} | Fim: {row['DataFim']}": row['ID'] 
            for index, row in df_display.iterrows()
        }
        opcoes_keys = ["Selecione uma promo√ß√£o..."] + list(opcoes_promo_operacao.keys())
        
        promo_selecionada_str = st.selectbox(
            "Selecione o item para Editar ou Excluir:",
            options=opcoes_keys,
            index=0, 
            key="select_promo_operacao_lc"
        )
        
        promo_id_selecionado = opcoes_promo_operacao.get(promo_selecionada_str)
        
        if promo_id_selecionado is not None:
            
            # Puxa a linha original (sem normaliza√ß√£o de data para input)
            linha_original = promocoes_df[promocoes_df["ID"].astype(str) == promo_id_selecionado].iloc[0]
            
            with st.expander(f"‚úèÔ∏è Editar Promo√ß√£o ID {promo_id_selecionado}", expanded=True):
                
                opcoes_prod_edit = (produtos["ID"].astype(str) + " - " + produtos["Nome"]).tolist()
                opcoes_prod_edit.insert(0, "")
                
                pre_opcao = (
                    f"{linha_original['IDProduto']} - {linha_original['NomeProduto']}"
                    if f"{linha_original['IDProduto']} - {linha_original['NomeProduto']}" in opcoes_prod_edit
                    else ""
                )
                
                sel_prod_edit = st.selectbox(
                    "Produto (editar)", opcoes_prod_edit,
                    index=opcoes_prod_edit.index(pre_opcao) if pre_opcao in opcoes_prod_edit else 0,
                    key=f"promo_edit_prod_{promo_id_selecionado}"
                )
                
                pid_e = sel_prod_edit.split(" - ")[0].strip()
                pnome_e = sel_prod_edit.split(" - ", 1)[1].strip() if len(sel_prod_edit.split(" - ", 1)) > 1 else linha_original['NomeProduto']

                col1, col2, col3 = st.columns([1, 1, 1])
                
                with col1:
                    desc_e = st.text_input("Desconto (%)", value=str(to_float(linha_original["Desconto"])), key=f"promo_edit_desc_{promo_id_selecionado}")
                
                with col2:
                    di = parse_date_yyyy_mm_dd(linha_original["DataInicio"]) or date.today()
                    data_ini_e = st.date_input("In√≠cio", value=di, key=f"promo_edit_inicio_{promo_id_selecionado}")
                
                with col3:
                    df_date = parse_date_yyyy_mm_dd(linha_original["DataFim"]) or (date.today() + timedelta(days=7))
                    data_fim_e = st.date_input("T√©rmino", value=df_date, key=f"promo_edit_fim_{promo_id_selecionado}")
                
                col_btn_edit, col_btn_delete = st.columns(2)
                
                with col_btn_edit:
                    if st.button("üíæ Salvar Edi√ß√£o", key=f"promo_btn_edit_{promo_id_selecionado}", type="secondary", use_container_width=True):
                        dnum = to_float(desc_e)
                        if dnum < 0 or dnum > 100:
                            st.error("O desconto deve estar entre 0 e 100%.")
                        elif data_fim_e < data_ini_e:
                            st.error("A data de t√©rmino deve ser maior ou igual √† data de in√≠cio.")
                        elif not pid_e:
                            st.error("Selecione um produto v√°lido.")
                        else:
                            idx = promocoes_df["ID"].astype(str) == promo_id_selecionado
                            promocoes_df.loc[idx, ["IDProduto", "NomeProduto", "Desconto", "DataInicio", "DataFim"]] = [
                                str(pid_e), pnome_e, float(dnum), str(data_ini_e), str(data_fim_e)
                            ]
                            st.session_state.promocoes = promocoes_df
                            if True: # Simula√ß√£o de salvamento bem-sucedido
                                carregar_promocoes.clear()
                                st.success("Promo√ß√£o atualizada!")
                                st.rerun()  # üîë atualiza√ß√£o imediata

                with col_btn_delete:
                    if st.button("üóëÔ∏è Excluir Promo√ß√£o", key=f"promo_btn_del_{promo_id_selecionado}", type="primary", use_container_width=True):
                        st.session_state.promocoes = promocoes_df[promocoes_df["ID"].astype(str) != promo_id_selecionado]
                        if True: # Simula√ß√£o de salvamento bem-sucedido
                            carregar_promocoes.clear()
                            st.warning(f"Promo√ß√£o {promo_id_selecionado} exclu√≠da!")
                            st.rerun()  # üîë atualiza√ß√£o imediata
        else:
            st.info("Selecione uma promo√ß√£o para ver as op√ß√µes de edi√ß√£o e exclus√£o.")


def gestao_produtos():
    
    # Inicializa ou carrega o estado de produtos
    produtos = inicializar_produtos()
    
    # T√≠tulo da P√°gina
    st.header("üì¶ Gest√£o de Produtos e Estoque") # Mant√©m o st.header para o t√≠tulo da se√ß√£o

    # L√≥gica de Salvamento Autom√°tico para sincronizar altera√ß√µes feitas pelo Livro Caixa
    save_data_github_produtos(produtos, ARQ_PRODUTOS, COMMIT_MESSAGE_PROD)


    # ================================
    # SUBABAS
    # ================================
    tab_cadastro, tab_lista = st.tabs(["üìù Cadastro de Produtos", "üìë Lista & Busca"])

    # ================================
    # SUBABA: CADASTRO
    # ================================
    with tab_cadastro:
        st.subheader("üìù Cadastro de Produtos")
        
        if 'codigo_barras' not in st.session_state:
            st.session_state["codigo_barras"] = ""
        if 'cb_grade_lidos' not in st.session_state:
            st.session_state.cb_grade_lidos = {}


        # --- Cadastro ---
        with st.expander("Cadastrar novo produto", expanded=True):
            c1, c2, c3 = st.columns(3)
            with c1:
                tipo_produto = st.radio("Tipo de produto", ["Produto simples", "Produto com varia√ß√µes (grade)"], key="cad_tipo_produto")
                nome = st.text_input("Nome", key="cad_nome")
                marca = st.text_input("Marca", key="cad_marca")
                categoria = st.text_input("Categoria", key="cad_categoria")

            with c2:
                # Inicializa valores de produto simples para passar ao callback
                qtd = 0
                preco_custo = "0,00"
                preco_vista = "0,00"
                
                if tipo_produto == "Produto simples":
                    qtd = st.number_input("Quantidade", min_value=0, step=1, value=0, key="cad_qtd")
                    preco_custo = st.text_input("Pre√ßo de Custo", value="0,00", key="cad_preco_custo")
                    preco_vista = st.text_input("Pre√ßo √† Vista", value="0,00", key="cad_preco_vista")
                    preco_cartao = 0.0
                    try:
                        preco_cartao = round(to_float(preco_vista) / FATOR_CARTAO, 2)
                    except Exception:
                        preco_cartao = 0.0
                    st.text_input("Pre√ßo no Cart√£o (auto)", value=str(preco_cartao).replace(".", ","), disabled=True, key="cad_preco_cartao")
                else:
                    st.info("Cadastre as varia√ß√µes abaixo (grade).")

            with c3:
                validade = st.date_input("Validade (opcional)", value=date.today(), key="cad_validade")
                foto_url = st.text_input("URL da Foto (opcional)", key="cad_foto_url")
                st.file_uploader("üì∑ Enviar Foto", type=["png", "jpg", "jpeg"], key="cad_foto") 
                
                # O campo de texto usa o valor do session_state (que √© preenchido pela leitura)
                codigo_barras = st.text_input("C√≥digo de Barras (Pai/Simples)", value=st.session_state.get("codigo_barras", ""), key="cad_cb")

                # --- Escanear com c√¢mera (Produto Simples/Pai) ---
                foto_codigo = st.camera_input("üì∑ Escanear c√≥digo de barras / QR Code", key="cad_cam")
                if foto_codigo is not None:
                    imagem_bytes = foto_codigo.getbuffer() 
                    codigos_lidos = ler_codigo_barras_api(imagem_bytes)
                    if codigos_lidos:
                        # Preenche o valor no session_state e for√ßa o re-run
                        st.session_state["codigo_barras"] = codigos_lidos[0]
                        st.success(f"C√≥digo lido: **{st.session_state['codigo_barras']}**")
                        st.rerun() 
                    else:
                        st.error("‚ùå N√£o foi poss√≠vel ler nenhum c√≥digo.")

                # --- Upload de imagem do c√≥digo de barras (Produto Simples/Pai) ---
                foto_codigo_upload = st.file_uploader("üì§ Upload de imagem do c√≥digo de barras", type=["png", "jpg", "jpeg"], key="cad_cb_upload")
                if foto_codigo_upload is not None:
                    imagem_bytes = foto_codigo_upload.getvalue() 
                    codigos_lidos = ler_codigo_barras_api(imagem_bytes)
                    if codigos_lidos:
                        # Preenche o valor no session_state e for√ßa o re-run
                        st.session_state["codigo_barras"] = codigos_lidos[0]
                        st.success(f"C√≥digo lido via upload: **{st.session_state['codigo_barras']}**")
                        st.rerun() 
                    else:
                        st.error("‚ùå N√£o foi poss√≠vel ler nenhum c√≥digo da imagem enviada.")

            # --- Cadastro da grade (varia√ß√µes) ---
            varia√ß√µes = []
            if tipo_produto == "Produto com varia√ß√µes (grade)":
                st.markdown("#### Cadastro das varia√ß√µes (grade)")
                qtd_varia√ß√µes = st.number_input("Quantas varia√ß√µes deseja cadastrar?", min_value=1, step=1, key="cad_qtd_varia√ß√µes")

                
                for i in range(int(qtd_varia√ß√µes)):
                    st.markdown(f"--- **Varia√ß√£o {i+1}** ---")
                    
                    var_c1, var_c2, var_c3, var_c4 = st.columns(4)
                    
                    var_nome = var_c1.text_input(f"Nome da varia√ß√£o {i+1}", key=f"var_nome_{i}")
                    var_qtd = var_c2.number_input(f"Quantidade varia√ß√£o {i+1}", min_value=0, step=1, value=0, key=f"var_qtd_{i}")
                    var_preco_custo = st.text_input(f"Pre√ßo de Custo varia√ß√£o {i+1}", value="0,00", key=f"var_pc_{i}")
                    var_preco_vista = st.text_input("Pre√ßo √† Vista varia√ß√£o {i+1}", value="0,00", key=f"var_pv_{i}")
                    
                    var_cb_c1, var_cb_c2, var_cb_c3 = st.columns([2, 1, 1])

                    with var_cb_c1:
                        # O campo de texto da varia√ß√£o l√™ o valor salvo na sess√£o
                        valor_cb_inicial = st.session_state.cb_grade_lidos.get(f"var_cb_{i}", "")
                        var_codigo_barras = st.text_input(
                            f"C√≥digo de barras varia√ß√£o {i+1}", 
                            value=valor_cb_inicial, 
                            key=f"var_cb_{i}" 
                        )
                        
                    with var_cb_c2:
                        var_foto_upload = st.file_uploader(
                            "Upload CB", 
                            type=["png", "jpg", "jpeg"], 
                            key=f"var_cb_upload_{i}"
                        )
                    
                    with var_cb_c3:
                        var_foto_cam = st.camera_input(
                            "Escanear CB", 
                            key=f"var_cb_cam_{i}"
                        )
                    
                    # Logica de leitura do C√≥digo de Barras para a Varia√ß√£o
                    foto_lida = var_foto_upload or var_foto_cam
                    if foto_lida:
                        imagem_bytes = foto_lida.getvalue() if var_foto_upload else foto_lida.getbuffer()
                        codigos_lidos = ler_codigo_barras_api(imagem_bytes)
                        if codigos_lidos:
                            # Preenche o valor na sess√£o da grade e for√ßa o re-run
                            st.session_state.cb_grade_lidos[f"var_cb_{i}"] = codigos_lidos[0]
                            st.success(f"CB Varia√ß√£o {i+1} lido: **{codigos_lidos[0]}**")
                            st.rerun() 
                        else:
                            st.error("‚ùå N√£o foi poss√≠vel ler nenhum c√≥digo.")

                    varia√ß√µes.append({
                        "Nome": var_nome.strip(),
                        "Quantidade": int(var_qtd),
                        "PrecoCusto": to_float(var_preco_custo),
                        "PrecoVista": to_float(var_preco_vista),
                        "PrecoCartao": round(to_float(var_preco_vista) / FATOR_CARTAO, 2) if to_float(var_preco_vista) > 0 else 0.0,
                        "CodigoBarras": var_codigo_barras 
                    })
                
            # --- BOT√ÉO SALVAR PRODUTO (CHAMANDO CALLBACK) ---
            if st.button(
                "üíæ Salvar", 
                use_container_width=True, 
                key="cad_salvar",
                on_click=lambda: st.rerun() if callback_salvar_novo_produto(produtos.copy(), tipo_produto, nome, marca, categoria, qtd, preco_custo, preco_vista, validade, foto_url, codigo_barras, varia√ß√µes) else None,
                help="Salvar Novo Produto Completo" 
            ):
                st.rerun()


    # ================================
    # SUBABA: LISTA & BUSCA
    # ================================
    with tab_lista:
        st.subheader("üìë Lista & Busca de Produtos")

        # --- Busca minimalista ---
        with st.expander("üîç Pesquisar produto", expanded=True):
            criterio = st.selectbox(
                "Pesquisar por:",
                ["Nome", "Marca", "C√≥digo de Barras", "Valor"]
            )
            termo = st.text_input("Digite para buscar:")

            if termo:
                if criterio == "Nome":
                    produtos_filtrados = produtos[produtos["Nome"].astype(str).str.contains(termo, case=False, na=False)]
                elif criterio == "Marca":
                    produtos_filtrados = produtos[produtos["Marca"].astype(str).str.contains(termo, case=False, na=False)]
                elif criterio == "C√≥digo de Barras":
                    produtos_filtrados = produtos[produtos["CodigoBarras"].astype(str).str.contains(termo, case=False, na=False)]
                elif criterio == "Valor":
                    try:
                        valor = float(termo.replace(",", "."))
                        produtos_filtrados = produtos[
                            (produtos["PrecoVista"].astype(float) == valor) |
                            (produtos["PrecoCusto"].astype(float) == valor) |
                            (produtos["PrecoCartao"].astype(float) == valor)
                        ]
                    except:
                        st.warning("Digite um n√∫mero v√°lido para buscar por valor.")
                        produtos_filtrados = produtos.copy()
            else:
                # SE NENHUM TERMO FOR DIGITADO, EXIBE TODOS OS PRODUTOS
                produtos_filtrados = produtos.copy()

            if "PaiID" not in produtos_filtrados.columns:
                produtos_filtrados["PaiID"] = None

        # --- Lista de produtos com agrupamento por Pai e Varia√ß√µes ---
        st.markdown("### Lista de produtos")

        if produtos_filtrados.empty:
            st.info("Nenhum produto encontrado.")
        else:
            produtos_filtrados["Quantidade"] = pd.to_numeric(produtos_filtrados["Quantidade"], errors='coerce').fillna(0).astype(int)
            
            # CORRE√á√ÉO CR√çTICA: Filtra apenas os produtos que N√ÉO s√£o varia√ß√µes (PaiID √© nulo ou vazio/NaN)
            # Produtos que t√™m PaiID preenchido s√£o listados *dentro* do expander do produto Pai.
            produtos_pai = produtos_filtrados[produtos_filtrados["PaiID"].isnull() | (produtos_filtrados["PaiID"] == '')]
            produtos_filho = produtos_filtrados[produtos_filtrados["PaiID"].notnull() & (produtos_filtrados["PaiID"] != '')]
            
            st.markdown("""
                <style>
                .custom-header, .custom-row {
                    display: grid;
                    grid-template-columns: 80px 3fr 1fr 1fr 1.5fr 0.5fr 0.5fr;
                    align-items: center;
                    gap: 5px;
                }
                .custom-header {
                    font-weight: bold;
                    padding: 8px 0;
                    border-bottom: 1px solid #ccc;
                    margin-bottom: 5px;
                }
                .custom-price-block {
                    line-height: 1.2;
                }
                .stButton > button {
                    height: 32px;
                    width: 32px;
                    padding: 0;
                    margin: 0;
                    border-radius: 5px;
                    border: 1px solid #ddd;
                    background-color: #f0f2f6;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }
                .stButton > button:hover {
                    background-color: #e0e0e0;
                }
                </style>
                <div class="custom-header">
                    <div>Foto</div>
                    <div>Produto & Marca</div>
                    <div>Estoque</div>
                    <div>Validade</div>
                    <div>Pre√ßos (C/V/C)</div>
                    <div style="grid-column: span 2;">A√ß√µes</div>
                </div>
            """, unsafe_allow_html=True)


            for index, pai in produtos_pai.iterrows():
                # A partir daqui, a l√≥gica de listagem funciona como o esperado, usando apenas os "produtos_pai" (que incluem produtos simples).
                with st.container(border=True):
                    c = st.columns([1, 3, 1, 1, 1.5, 0.5, 0.5]) 
                    
                    if str(pai["FotoURL"]).strip():
                        try:
                            c[0].image(pai["FotoURL"], width=60)
                        except Exception:
                            c[0].write("‚Äî")
                    else:
                        c[0].write("‚Äî")

                    cb = f' ‚Ä¢ CB: {pai["CodigoBarras"]}' if str(pai.get("CodigoBarras", "")).strip() else ""
                    c[1].markdown(f"**{pai['Nome']}**<br><small>Marca: {pai['Marca']} | Cat: {pai['Categoria']}</small>", unsafe_allow_html=True)
                    
                    estoque_total = pai['Quantidade']
                    filhos_do_pai = produtos_filho[produtos_filho["PaiID"] == str(pai["ID"])]
                    if not filhos_do_pai.empty:
                        # Se houver filhos, o estoque total √© a soma dos filhos.
                        estoque_total = filhos_do_pai['Quantidade'].sum()
                    
                    c[2].markdown(f"**{estoque_total}**")
                    
                    c[3].write(f"{pai['Validade']}")
                    
                    pv = to_float(pai['PrecoVista'])
                    pc_calc = round(pv / FATOR_CARTAO, 2)
                    
                    preco_html = (
                        f'<div class="custom-price-block">'
                        f'<small>C: R$ {to_float(pai['PrecoCusto']):,.2f}</small><br>'
                        f'**V:** R$ {pv:,.2f}<br>'
                        f'**C:** R$ {pc_calc:,.2f}'
                        f'</div>'
                    )
                    c[4].markdown(preco_html, unsafe_allow_html=True)
                    
                    try:
                        eid = str(pai["ID"])
                    except Exception:
                        eid = str(index)

                    if c[5].button("‚úèÔ∏è", key=f"edit_pai_{index}_{eid}", help="Editar produto"):
                        st.session_state["edit_prod"] = eid
                        st.rerun()

                    if c[6].button("üóëÔ∏è", key=f"del_pai_{index}_{eid}", help="Excluir produto"):
                        produtos = produtos[produtos["ID"] != eid]
                        produtos = produtos[produtos["PaiID"] != eid]
                        st.session_state["produtos"] = produtos
                        
                        nome_pai = str(pai.get('Nome', 'Produto Desconhecido'))
                        if salvar_produtos_no_github(produtos, f"Exclus√£o do produto pai {nome_pai}"):
                            inicializar_produtos.clear() 
                        st.rerun()
                        
                    if not filhos_do_pai.empty:
                        with st.expander(f"Varia√ß√µes de {pai['Nome']} ({len(filhos_do_pai)} varia√ß√µes)"):
                            for index_var, var in filhos_do_pai.iterrows():
                                c_var = st.columns([1, 3, 1, 1, 1.5, 0.5, 0.5]) 
                                
                                foto_url_var = str(var["FotoURL"]).strip() or str(pai["FotoURL"]).strip()
                                if foto_url_var:
                                    try:
                                        c_var[0].image(foto_url_var, width=60)
                                    except Exception:
                                        c_var[0].write("‚Äî")
                                else:
                                    c_var[0].write("‚Äî")

                                cb_var = f' ‚Ä¢ CB: {var["CodigoBarras"]}' if str(var.get("CodigoBarras", "")).strip() else ""
                                c_var[1].markdown(f"**{var['Nome']}**<br><small>Marca: {var['Marca']} | Cat: {var['Categoria']}</small>", unsafe_allow_html=True)
                                
                                c_var[2].write(f"{var['Quantidade']}")
                                
                                c_var[3].write(f"{pai['Validade']}")

                                pv_var = to_float(var['PrecoVista'])
                                pc_var_calc = round(pv_var / FATOR_CARTAO, 2)
                                
                                preco_var_html = (
                                    f'<div class="custom-price-block">'
                                    f'<small>C: R$ {to_float(var['PrecoCusto']):,.2f}</small><br>'
                                    f'**V:** R$ {pv_var:,.2f}<br>'
                                    f'**C:** R$ {pc_var_calc:,.2f}'
                                    f'</div>'
                                )
                                c_var[4].markdown(preco_var_html, unsafe_allow_html=True)
                                
                                try:
                                    eid_var = str(var["ID"])
                                except Exception:
                                    eid_var = str(index_var)

                                if c_var[5].button("‚úèÔ∏è", key=f"edit_filho_{index_var}_{eid_var}", help="Editar varia√ß√£o"):
                                    st.session_state["edit_prod"] = eid_var
                                    st.rerun()

                                if c_var[6].button("üóëÔ∏è", key=f"del_filho_{index_var}_{eid_var}", help="Excluir varia√ß√£o"):
                                    products = produtos[produtos["ID"] != eid_var]
                                    st.session_state["produtos"] = products
                                    
                                    nome_var = str(var.get('Nome', 'Varia√ß√£o Desconhecida'))
                                    if salvar_produtos_no_github(products, f"Exclus√£o da varia√ß√£o {nome_var}"):
                                        inicializar_produtos.clear() 
                                    st.rerun()

            if "edit_prod" in st.session_state:
                eid = st.session_state["edit_prod"]
                row = produtos[produtos["ID"] == str(eid)]
                if not row.empty:
                    st.subheader(f"Editar produto ID: {eid} ({row.iloc[0]['Nome']})")
                    row = row.iloc[0]
                    
                    c1, c2, c3 = st.columns(3)
                    with c1:
                        novo_nome = st.text_input("Nome", value=row["Nome"], key=f"edit_nome_{eid}")
                        nova_marca = st.text_input("Marca", value=row["Marca"], key=f"edit_marca_{eid}")
                        nova_cat = st.text_input("Categoria", value=row["Categoria"], key=f"edit_cat_{eid}")
                    with c2:
                        qtd_value = int(row["Quantidade"]) if pd.notna(row["Quantidade"]) else 0
                        nova_qtd = st.number_input("Quantidade", min_value=0, step=1, value=qtd_value, key=f"edit_qtd_{eid}")
                        novo_preco_custo = st.text_input("Pre√ßo de Custo", value=f"{to_float(row["PrecoCusto"]):.2f}".replace(".", ","), key=f"edit_pc_{eid}")
                        novo_preco_vista = st.text_input("Pre√ßo √† Vista", value=f"{to_float(row["PrecoVista"]):.2f}".replace(".", ","), key=f"edit_pv_{eid}")
                    with c3:
                        try:
                            # Tenta garantir que a validade seja um objeto date para o input
                            vdata = row["Validade"] if pd.notna(row["Validade"]) and isinstance(row["Validade"], date) else date.today()
                        except Exception:
                            vdata = date.today()
                        nova_validade = st.date_input("Validade", value=vdata, key=f"edit_val_{eid}")
                        nova_foto = st.text_input("URL da Foto", value=row["FotoURL"], key=f"edit_foto_{eid}")
                        novo_cb = st.text_input("C√≥digo de Barras", value=str(row.get("CodigoBarras", "")), key=f"edit_cb_{eid}")

                        foto_codigo_edit = st.camera_input("üì∑ Atualizar c√≥digo de barras", key=f"edit_cam_{eid}")
                        if foto_codigo_edit is not None:
                            codigo_lido = ler_codigo_barras_api(foto_codigo_edit.getbuffer()) 
                            if codigo_lido:
                                novo_cb = codigo_lido[0]
                                st.success(f"C√≥digo lido: **{novo_cb}**")

                    col_empty_left, col_save, col_cancel = st.columns([3, 1.5, 1.5]) 
                    
                    with col_save:
                        if st.button("üíæ Salvar", key=f"save_{eid}", type="primary", use_container_width=True, help="Salvar Altera√ß√µes"):
                            preco_vista_float = to_float(novo_preco_vista)
                            novo_preco_cartao = round(preco_vista_float / FATOR_CARTAO, 2) if preco_vista_float > 0 else 0.0
                            
                            produtos.loc[produtos["ID"] == str(eid), [
                                "Nome", "Marca", "Categoria", "Quantidade",
                                "PrecoCusto", "PrecoVista", "PrecoCartao",
                                "Validade", "FotoURL", "CodigoBarras"
                            ]] = [
                                novo_nome.strip(),
                                nova_marca.strip(),
                                nova_cat.strip(),
                                int(nova_qtd),
                                to_float(novo_preco_custo),
                                preco_vista_float,
                                novo_preco_cartao,
                                nova_validade, # J√° √© um objeto date
                                nova_foto.strip(),
                                str(novo_cb).strip()
                            ]
                            st.session_state["produtos"] = produtos
                            if salvar_produtos_no_github(produtos, "Atualizando produto"):
                                inicializar_produtos.clear()
                                
                            del st.session_state["edit_prod"]
                            st.rerun()
                            
                    with col_cancel:
                        if st.button("‚ùå Cancelar", key=f"cancel_{eid}", use_container_width=True, help="Cancelar Edi√ß√£o"):
                            del st.session_state["edit_prod"]
                            st.rerun()


def historico_compras():
    
    st.header("üõí Hist√≥rico de Compras de Insumos")
    st.info("Utilize esta p√°gina para registrar produtos (insumos, materiais, estoque) comprados. Estes dados s√£o **separados** do controle de estoque principal e do Livro Caixa.")

    if "df_compras" not in st.session_state:
        st.session_state.df_compras = carregar_historico_compras()

    df_compras = st.session_state.df_compras.copy()
    
    if not df_compras.empty:
        df_compras['Data'] = pd.to_datetime(df_compras['Data'], errors='coerce').dt.date
        df_compras['Quantidade'] = pd.to_numeric(df_compras['Quantidade'], errors='coerce').fillna(0).astype(int)
        df_compras['Valor Total'] = pd.to_numeric(df_compras['Valor Total'], errors='coerce').fillna(0.0)
        
    df_exibicao = df_compras.sort_values(by='Data', ascending=False).reset_index(drop=False)
    df_exibicao.rename(columns={'index': 'original_index'}, inplace=True)
    df_exibicao.insert(0, 'ID', df_exibicao.index + 1)
    
    hoje = date.today()
    primeiro_dia_mes = hoje.replace(day=1)
    if hoje.month == 12:
        proximo_mes = hoje.replace(year=hoje.year + 1, month=1, day=1)
    else:
        proximo_mes = hoje.replace(month=hoje.month + 1, day=1)
    ultimo_dia_mes = proximo_mes - timedelta(days=1)
    
    df_mes_atual = df_exibicao[
        (df_exibicao["Data"].apply(lambda x: pd.notna(x) and x >= primeiro_dia_mes and x <= ultimo_dia_mes)) &
        (df_exibicao["Valor Total"] > 0)
    ].copy()

    total_gasto_mes = df_mes_atual['Valor Total'].sum() 

    st.markdown("---")
    st.subheader(f"üìä Resumo de Gastos - M√™s de {primeiro_dia_mes.strftime('%m/%Y')}")
    st.metric(
        label="üí∞ Total Gasto com Compras de Insumos (M√™s Atual)",
        value=f"R$ {total_gasto_mes:,.2f}"
    )
    st.markdown("---")
    
    tab_cadastro, tab_dashboard = st.tabs(["üìù Cadastro & Lista de Compras", "üìà Dashboard de Gastos"])
    
    with tab_dashboard:
        st.header("üìà An√°lise de Gastos com Compras")
        
        if df_exibicao.empty:
            st.info("Nenhum dado de compra registrado para gerar o dashboard.")
        else:
            df_gasto_por_produto = df_exibicao.groupby('Produto')['Valor Total'].sum().reset_index()
            df_gasto_por_produto = df_gasto_por_produto.sort_values(by='Valor Total', ascending=False)
            
            st.markdown("### ü•á Top Produtos Mais Gastos (Valor Total)")
            
            if not df_gasto_por_produto.empty:
                top_n = st.slider("Mostrar Top N Produtos", min_value=5, max_value=20, value=10)
                top_produtos = df_gasto_por_produto.head(top_n)

                fig_top_produtos = px.bar(
                    top_produtos,
                    x='Produto',
                    y='Valor Total',
                    text='Valor Total',
                    title=f'Top {top_n} Produtos por Gasto Total',
                    labels={'Valor Total': 'Gasto Total (R$)', 'Produto': 'Produto'},
                    color='Valor Total',
                    color_continuous_scale=px.colors.sequential.Sunset
                )
                fig_top_produtos.update_traces(texttemplate='R$ %{y:,.2f}', textposition='outside')
                fig_top_produtos.update_layout(xaxis={'categoryorder':'total descending'}, height=500)
                st.plotly_chart(fig_top_produtos, use_container_width=True)

                st.markdown("---")
                st.markdown("### üìÖ Gasto Mensal Hist√≥rico (Agregado)")
                
                df_temp_data = df_exibicao[df_exibicao['Data'].notna()].copy()
                df_temp_data['Data_dt'] = pd.to_datetime(df_temp_data['Data'])
                df_temp_data['MesAno'] = df_temp_data['Data_dt'].dt.strftime('%Y-%m')
                
                df_gasto_mensal = df_temp_data.groupby('MesAno')['Valor Total'].sum().reset_index()
                df_gasto_mensal = df_gasto_mensal.sort_values(by='MesAno')

                fig_mensal = px.line(
                    df_gasto_mensal,
                    x='MesAno',
                    y='Valor Total',
                    title='Evolu√ß√£o do Gasto Mensal com Compras',
                    labels={'Valor Total': 'Gasto (R$)', 'MesAno': 'M√™s/Ano'},
                    markers=True
                )
                st.plotly_chart(fig_mensal, use_container_width=True)
    
    with tab_cadastro:
        
        edit_mode_compra = st.session_state.get('edit_compra_idx') is not None
        
        if edit_mode_compra:
            original_idx_to_edit = st.session_state.edit_compra_idx
            linha_para_editar = df_compras[df_compras.index == original_idx_to_edit]
            
            if not linha_para_editar.empty:
                compra_data = linha_para_editar.iloc[0]
                try: default_data = pd.to_datetime(compra_data['Data']).date()
                except: default_data = date.today()
                    
                default_produto = compra_data['Produto']
                default_qtd = int(compra_data['Quantidade'])
                valor_total_compra = float(compra_data['Valor Total'])
                default_qtd_float = float(default_qtd)
                valor_unitario_existente = valor_total_compra / default_qtd_float if default_qtd_float > 0 else valor_total_compra
                default_valor = float(valor_unitario_existente)
                
                default_cor = compra_data['Cor']
                default_foto_url = compra_data['FotoURL']
                
                st.subheader("üìù Editar Compra Selecionada")
                st.warning(f"Editando item: **{default_produto}** (ID Interno: {original_idx_to_edit})")
            else:
                st.session_state.edit_compra_idx = None
                edit_mode_compra = False
                st.subheader("üìù Formul√°rio de Registro")
                
        if not edit_mode_compra:
            st.subheader("üìù Formul√°rio de Registro")
            default_data = date.today()
            default_produto = ""
            default_qtd = 1
            default_valor = 10.00
            default_cor = "#007bff"
            default_foto_url = ""


        with st.form("form_compra", clear_on_submit=not edit_mode_compra):
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                data = st.date_input("Data da Compra", value=default_data, key="compra_data_form")
                nome_produto = st.text_input("Produto/Material Comprado", value=default_produto, key="compra_nome_form")
                
            with col2:
                quantidade = st.number_input("Quantidade", min_value=1, value=default_qtd, step=1, key="compra_qtd_form")
                valor_unitario_input = st.number_input("Pre√ßo Unit√°rio (R$)", min_value=0.01, format="%.2f", value=default_valor, key="compra_valor_form")
                
            with col3:
                cor_selecionada = st.color_picker("Cor para Destaque", value=default_cor, key="compra_cor_form")
            
            with col4:
                foto_url = st.text_input("URL da Foto do Produto (Opcional)", value=default_foto_url, key="compra_foto_url_form")
            
            valor_total_calculado = float(quantidade) * float(valor_unitario_input)
            st.markdown(f"**Custo Total Calculado:** R$ {valor_total_calculado:,.2f}")
            
            
            if edit_mode_compra:
                col_sub1, col_sub2 = st.columns(2)
                salvar_compra = col_sub1.form_submit_button("üíæ Salvar Edi√ß√£o", type="primary", use_container_width=True)
                cancelar_edicao = col_sub2.form_submit_button("‚ùå Cancelar Edi√ß√£o", type="secondary", use_container_width=True)
            else:
                salvar_compra = st.form_submit_button("üíæ Adicionar Compra", type="primary", use_container_width=True)
                cancelar_edicao = False


            if salvar_compra:
                if not nome_produto or valor_total_calculado <= 0 or quantidade <= 0:
                    st.error("Preencha todos os campos obrigat√≥rios com valores v√°lidos. O Custo Total deve ser maior que R$ 0,00.")
                else:
                    nova_linha = {
                        "Data": data.strftime('%Y-%m-%d'),
                        "Produto": nome_produto.strip(),
                        "Quantidade": int(quantidade),
                        "Valor Total": valor_total_calculado, 
                        "Cor": cor_selecionada,
                        "FotoURL": foto_url.strip(),
                    }
                    
                    if edit_mode_compra:
                        st.session_state.df_compras.loc[original_idx_to_edit] = pd.Series(nova_linha)
                        commit_msg = f"Edi√ß√£o da compra {nome_produto}"
                    else:
                        df_original = st.session_state.df_compras.iloc[:, :len(COLUNAS_COMPRAS)]
                        st.session_state.df_compras = pd.concat([df_original, pd.DataFrame([nova_linha])], ignore_index=True)
                        commit_msg = f"Nova compra registrada: {nome_produto}"

                    if salvar_historico_no_github(st.session_state.df_compras, commit_msg):
                        st.session_state.edit_compra_idx = None
                        st.cache_data.clear()
                        st.rerun()

            if cancelar_edicao:
                st.session_state.edit_compra_idx = None
                st.rerun()
        
        st.markdown("---")
        st.subheader("Lista e Opera√ß√µes de Hist√≥rico")
        
        with st.expander("üîç Filtros da Lista", expanded=False):
            col_f1, col_f2 = st.columns([1, 2])
            
            with col_f1:
                filtro_produto = st.text_input("Filtrar por nome do Produto:", key="filtro_compra_produto_tab")
            
            with col_f2:
                data_range_option = st.radio(
                    "Filtrar por Per√≠odo:",
                    ["Todo o Hist√≥rico", "Personalizar Data"],
                    key="filtro_compra_data_opt_tab",
                    horizontal=True
                )

            df_filtrado = df_exibicao.copy()

            if filtro_produto:
                df_filtrado = df_filtrado[df_filtrado["Produto"].astype(str).str.contains(filtro_produto, case=False, na=False)]

            if data_range_option == "Personalizar Data":
                if not df_filtrado.empty:
                    min_date_val = df_filtrado['Data'].min() if pd.notna(df_filtrado['Data'].min()) else date.today()
                    max_date_val = df_filtrado['Data'].max() if pd.notna(df_filtrado['Data'].max()) else date.today()
                else:
                    min_date_val = date.today()
                    max_date_val = date.today()
                    
                col_date1, col_date2 = st.columns(2)
                with col_date1:
                    data_ini = st.date_input("De:", value=min_date_val, key="filtro_compra_data_ini_tab")
                with col_date2:
                    data_fim = st.date_input("At√©:", value=max_date_val, key="filtro_compra_data_fim_tab")
                    
                df_filtrado = df_filtrado[
                    (df_filtrado["Data"] >= data_ini) &
                    (df_filtrado["Data"] <= data_fim)
                ]
            
        if df_filtrado.empty:
            st.info("Nenhuma compra encontrada com os filtros aplicados.")
        else:
            df_filtrado['Data Formatada'] = df_filtrado['Data'].apply(lambda x: x.strftime('%d/%m/%Y') if pd.notna(x) else '')
            
            def highlight_color_compras(row):
                color = row['Cor']
                return [f'background-color: {color}30' for col in row.index]
            
            df_para_mostrar = df_filtrado.copy()
            df_para_mostrar['Foto'] = df_para_mostrar['FotoURL'].fillna('').astype(str).apply(lambda x: 'üì∑' if x.strip() else '')

            df_display_cols = ['ID', 'Data Formatada', 'Produto', 'Quantidade', 'Valor Total', 'Foto', 'Cor', 'original_index']
            df_styling = df_para_mostrar[df_display_cols].copy()
            
            styled_df = df_styling.style.apply(highlight_color_compras, axis=1)
            styled_df = styled_df.hide(subset=['Cor', 'original_index'], axis=1)

            st.markdown("##### Tabela de Itens Comprados")
            st.dataframe(
                styled_df,
                use_container_width=True,
                column_config={
                    "Data Formatada": st.column_config.TextColumn("Data da Compra"),
                    "Valor Total": st.column_config.NumberColumn("Valor Total (R$)", format="R$ %.2f"),
                    "Foto": st.column_config.TextColumn("Foto"),
                },
                column_order=('ID', 'Data Formatada', 'Produto', 'Quantidade', 'Valor Total', 'Foto'),
                height=400,
                selection_mode='disabled', 
                key='compras_table_styled'
            )
            
            
            st.markdown("### Opera√ß√µes de Edi√ß√£o e Exclus√£o")
            
            opcoes_compra_operacao = {
                f"ID {row['ID']} | {row['Data Formatada']} | {row['Produto']} | R$ {row['Valor Total']:,.2f}": row['original_index'] 
                for index, row in df_para_mostrar.iterrows()
            }
            opcoes_keys = list(opcoes_compra_operacao.keys())
            
            compra_selecionada_str = st.selectbox(
                "Selecione o item para Editar ou Excluir:",
                options=opcoes_keys,
                index=0 if not edit_mode_compra else (opcoes_keys.index(
                    next((k for k, v in opcoes_compra_operacao.items() if v == st.session_state.edit_compra_idx), opcoes_keys[0])
                ) if opcoes_keys else 0),
                key="select_compra_operacao_lc"
            )
            
            compra_original_idx = opcoes_compra_operacao.get(compra_selecionada_str)
            
            if compra_original_idx is not None:
                col_btn_edit, col_btn_delete = st.columns(2)
                
                with col_btn_edit:
                    if st.button("‚úèÔ∏è Editar Selecionado", key="btn_edit_compra", type="secondary", use_container_width=True):
                        st.session_state.edit_compra_idx = compra_original_idx
                        st.rerun()

                with col_btn_delete:
                    if st.button("üóëÔ∏è Excluir Compra", key="btn_del_compra", type="primary", use_container_width=True):
                        
                        df_para_excluir = st.session_state.df_compras.drop(index=compra_original_idx)
                        
                        if salvar_historico_no_github(df_para_excluir, f"Exclus√£o da compra ID Interno {compra_original_idx}"):
                            st.session_state.df_compras = df_para_excluir.reset_index(drop=True)
                            st.cache_data.clear()
                            st.success("‚úÖ Compra exclu√≠da com sucesso!")
                            st.rerun()
        else:
            st.info("Selecione uma compra para ver as op√ß√µes de edi√ß√£o e exclus√£o.")


def livro_caixa():
    """P√°gina principal de Gest√£o Financeira (Livro Caixa)."""
    st.header("üí∏ Livro Caixa: Entradas e Sa√≠das")
    st.warning("Implementa√ß√£o do Livro Caixa (Gest√£o Financeira) omitida na vers√£o atual para focar no m√≥dulo de Precifica√ß√£o.")
    # Aqui deveria estar toda a l√≥gica de Entradas/Sa√≠das/Dashboard financeiro.
    pass

# ==============================================================================
# ROTEAMENTO FINAL
# ==============================================================================

if 'main_page_select' not in st.session_state:
    st.session_state.main_page_select = "Home"

# Define a lista de p√°ginas principais
MAIN_PAGES = [
    "Home", 
    "Gest√£o Financeira (Livro Caixa)", 
    "Gest√£o de Produtos (Estoque)", 
    "Promo√ß√µes", 
    "Hist√≥rico de Compras", 
    "Precifica√ß√£o" # Novo m√≥dulo
]

# Roteamento principal na sidebar
pagina = st.sidebar.radio(
    "Escolha a p√°gina:",
    MAIN_PAGES,
    key='main_page_select_widget'
)

# Chama a fun√ß√£o da p√°gina selecionada
if pagina == "Home":
    homepage()
elif pagina == "Gest√£o Financeira (Livro Caixa)":
    livro_caixa() # Chama a fun√ß√£o (atualmente mockada para avisar o usu√°rio)
elif pagina == "Gest√£o de Produtos (Estoque)":
    gestao_produtos()
elif pagina == "Promo√ß√µes":
    gestao_promocoes()
elif pagina == "Hist√≥rico de Compras":
    historico_compras()
elif pagina == "Precifica√ß√£o":
    precificacao_geral() # Chama o roteador interno para Geral e Papelaria
